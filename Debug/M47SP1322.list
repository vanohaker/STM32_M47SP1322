
M47SP1322.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000027a0  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002934  08002934  00012934  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800294c  0800294c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800294c  0800294c  0001294c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002954  08002954  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002954  08002954  00012954  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002958  08002958  00012958  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800295c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c0  2000000c  08002968  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000cc  08002968  000200cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007e2b  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000140c  00000000  00000000  00027e67  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000818  00000000  00000000  00029278  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000770  00000000  00000000  00029a90  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000155bf  00000000  00000000  0002a200  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006296  00000000  00000000  0003f7bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008611f  00000000  00000000  00045a55  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000cbb74  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000020b0  00000000  00000000  000cbbf0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800291c 	.word	0x0800291c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	0800291c 	.word	0x0800291c

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e8:	f000 b972 	b.w	80004d0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9e08      	ldr	r6, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	4688      	mov	r8, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14b      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000212:	428a      	cmp	r2, r1
 8000214:	4615      	mov	r5, r2
 8000216:	d967      	bls.n	80002e8 <__udivmoddi4+0xe4>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b14a      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 800021e:	f1c2 0720 	rsb	r7, r2, #32
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	fa20 f707 	lsr.w	r7, r0, r7
 800022a:	4095      	lsls	r5, r2
 800022c:	ea47 0803 	orr.w	r8, r7, r3
 8000230:	4094      	lsls	r4, r2
 8000232:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000236:	0c23      	lsrs	r3, r4, #16
 8000238:	fbb8 f7fe 	udiv	r7, r8, lr
 800023c:	fa1f fc85 	uxth.w	ip, r5
 8000240:	fb0e 8817 	mls	r8, lr, r7, r8
 8000244:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000248:	fb07 f10c 	mul.w	r1, r7, ip
 800024c:	4299      	cmp	r1, r3
 800024e:	d909      	bls.n	8000264 <__udivmoddi4+0x60>
 8000250:	18eb      	adds	r3, r5, r3
 8000252:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000256:	f080 811b 	bcs.w	8000490 <__udivmoddi4+0x28c>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 8118 	bls.w	8000490 <__udivmoddi4+0x28c>
 8000260:	3f02      	subs	r7, #2
 8000262:	442b      	add	r3, r5
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0fe 	udiv	r0, r3, lr
 800026c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 fc0c 	mul.w	ip, r0, ip
 8000278:	45a4      	cmp	ip, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x8c>
 800027c:	192c      	adds	r4, r5, r4
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000282:	f080 8107 	bcs.w	8000494 <__udivmoddi4+0x290>
 8000286:	45a4      	cmp	ip, r4
 8000288:	f240 8104 	bls.w	8000494 <__udivmoddi4+0x290>
 800028c:	3802      	subs	r0, #2
 800028e:	442c      	add	r4, r5
 8000290:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000294:	eba4 040c 	sub.w	r4, r4, ip
 8000298:	2700      	movs	r7, #0
 800029a:	b11e      	cbz	r6, 80002a4 <__udivmoddi4+0xa0>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c6 4300 	strd	r4, r3, [r6]
 80002a4:	4639      	mov	r1, r7
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xbe>
 80002ae:	2e00      	cmp	r6, #0
 80002b0:	f000 80eb 	beq.w	800048a <__udivmoddi4+0x286>
 80002b4:	2700      	movs	r7, #0
 80002b6:	e9c6 0100 	strd	r0, r1, [r6]
 80002ba:	4638      	mov	r0, r7
 80002bc:	4639      	mov	r1, r7
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f783 	clz	r7, r3
 80002c6:	2f00      	cmp	r7, #0
 80002c8:	d147      	bne.n	800035a <__udivmoddi4+0x156>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd0>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80fa 	bhi.w	80004c8 <__udivmoddi4+0x2c4>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	4698      	mov	r8, r3
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa0>
 80002e2:	e9c6 4800 	strd	r4, r8, [r6]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa0>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xe8>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 808f 	bne.w	8000414 <__udivmoddi4+0x210>
 80002f6:	1b49      	subs	r1, r1, r5
 80002f8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002fc:	fa1f f885 	uxth.w	r8, r5
 8000300:	2701      	movs	r7, #1
 8000302:	fbb1 fcfe 	udiv	ip, r1, lr
 8000306:	0c23      	lsrs	r3, r4, #16
 8000308:	fb0e 111c 	mls	r1, lr, ip, r1
 800030c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000310:	fb08 f10c 	mul.w	r1, r8, ip
 8000314:	4299      	cmp	r1, r3
 8000316:	d907      	bls.n	8000328 <__udivmoddi4+0x124>
 8000318:	18eb      	adds	r3, r5, r3
 800031a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x122>
 8000320:	4299      	cmp	r1, r3
 8000322:	f200 80cd 	bhi.w	80004c0 <__udivmoddi4+0x2bc>
 8000326:	4684      	mov	ip, r0
 8000328:	1a59      	subs	r1, r3, r1
 800032a:	b2a3      	uxth	r3, r4
 800032c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000330:	fb0e 1410 	mls	r4, lr, r0, r1
 8000334:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000338:	fb08 f800 	mul.w	r8, r8, r0
 800033c:	45a0      	cmp	r8, r4
 800033e:	d907      	bls.n	8000350 <__udivmoddi4+0x14c>
 8000340:	192c      	adds	r4, r5, r4
 8000342:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x14a>
 8000348:	45a0      	cmp	r8, r4
 800034a:	f200 80b6 	bhi.w	80004ba <__udivmoddi4+0x2b6>
 800034e:	4618      	mov	r0, r3
 8000350:	eba4 0408 	sub.w	r4, r4, r8
 8000354:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000358:	e79f      	b.n	800029a <__udivmoddi4+0x96>
 800035a:	f1c7 0c20 	rsb	ip, r7, #32
 800035e:	40bb      	lsls	r3, r7
 8000360:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000364:	ea4e 0e03 	orr.w	lr, lr, r3
 8000368:	fa01 f407 	lsl.w	r4, r1, r7
 800036c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000370:	fa21 f30c 	lsr.w	r3, r1, ip
 8000374:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000378:	4325      	orrs	r5, r4
 800037a:	fbb3 f9f8 	udiv	r9, r3, r8
 800037e:	0c2c      	lsrs	r4, r5, #16
 8000380:	fb08 3319 	mls	r3, r8, r9, r3
 8000384:	fa1f fa8e 	uxth.w	sl, lr
 8000388:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 800038c:	fb09 f40a 	mul.w	r4, r9, sl
 8000390:	429c      	cmp	r4, r3
 8000392:	fa02 f207 	lsl.w	r2, r2, r7
 8000396:	fa00 f107 	lsl.w	r1, r0, r7
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b0>
 800039c:	eb1e 0303 	adds.w	r3, lr, r3
 80003a0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003a4:	f080 8087 	bcs.w	80004b6 <__udivmoddi4+0x2b2>
 80003a8:	429c      	cmp	r4, r3
 80003aa:	f240 8084 	bls.w	80004b6 <__udivmoddi4+0x2b2>
 80003ae:	f1a9 0902 	sub.w	r9, r9, #2
 80003b2:	4473      	add	r3, lr
 80003b4:	1b1b      	subs	r3, r3, r4
 80003b6:	b2ad      	uxth	r5, r5
 80003b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003bc:	fb08 3310 	mls	r3, r8, r0, r3
 80003c0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c4:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c8:	45a2      	cmp	sl, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1da>
 80003cc:	eb1e 0404 	adds.w	r4, lr, r4
 80003d0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003d4:	d26b      	bcs.n	80004ae <__udivmoddi4+0x2aa>
 80003d6:	45a2      	cmp	sl, r4
 80003d8:	d969      	bls.n	80004ae <__udivmoddi4+0x2aa>
 80003da:	3802      	subs	r0, #2
 80003dc:	4474      	add	r4, lr
 80003de:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e2:	fba0 8902 	umull	r8, r9, r0, r2
 80003e6:	eba4 040a 	sub.w	r4, r4, sl
 80003ea:	454c      	cmp	r4, r9
 80003ec:	46c2      	mov	sl, r8
 80003ee:	464b      	mov	r3, r9
 80003f0:	d354      	bcc.n	800049c <__udivmoddi4+0x298>
 80003f2:	d051      	beq.n	8000498 <__udivmoddi4+0x294>
 80003f4:	2e00      	cmp	r6, #0
 80003f6:	d069      	beq.n	80004cc <__udivmoddi4+0x2c8>
 80003f8:	ebb1 050a 	subs.w	r5, r1, sl
 80003fc:	eb64 0403 	sbc.w	r4, r4, r3
 8000400:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000404:	40fd      	lsrs	r5, r7
 8000406:	40fc      	lsrs	r4, r7
 8000408:	ea4c 0505 	orr.w	r5, ip, r5
 800040c:	e9c6 5400 	strd	r5, r4, [r6]
 8000410:	2700      	movs	r7, #0
 8000412:	e747      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f703 	lsr.w	r7, r0, r3
 800041c:	4095      	lsls	r5, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	fa21 f303 	lsr.w	r3, r1, r3
 8000426:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042a:	4338      	orrs	r0, r7
 800042c:	0c01      	lsrs	r1, r0, #16
 800042e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000432:	fa1f f885 	uxth.w	r8, r5
 8000436:	fb0e 3317 	mls	r3, lr, r7, r3
 800043a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800043e:	fb07 f308 	mul.w	r3, r7, r8
 8000442:	428b      	cmp	r3, r1
 8000444:	fa04 f402 	lsl.w	r4, r4, r2
 8000448:	d907      	bls.n	800045a <__udivmoddi4+0x256>
 800044a:	1869      	adds	r1, r5, r1
 800044c:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000450:	d22f      	bcs.n	80004b2 <__udivmoddi4+0x2ae>
 8000452:	428b      	cmp	r3, r1
 8000454:	d92d      	bls.n	80004b2 <__udivmoddi4+0x2ae>
 8000456:	3f02      	subs	r7, #2
 8000458:	4429      	add	r1, r5
 800045a:	1acb      	subs	r3, r1, r3
 800045c:	b281      	uxth	r1, r0
 800045e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000462:	fb0e 3310 	mls	r3, lr, r0, r3
 8000466:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046a:	fb00 f308 	mul.w	r3, r0, r8
 800046e:	428b      	cmp	r3, r1
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x27e>
 8000472:	1869      	adds	r1, r5, r1
 8000474:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000478:	d217      	bcs.n	80004aa <__udivmoddi4+0x2a6>
 800047a:	428b      	cmp	r3, r1
 800047c:	d915      	bls.n	80004aa <__udivmoddi4+0x2a6>
 800047e:	3802      	subs	r0, #2
 8000480:	4429      	add	r1, r5
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000488:	e73b      	b.n	8000302 <__udivmoddi4+0xfe>
 800048a:	4637      	mov	r7, r6
 800048c:	4630      	mov	r0, r6
 800048e:	e709      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000490:	4607      	mov	r7, r0
 8000492:	e6e7      	b.n	8000264 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fb      	b.n	8000290 <__udivmoddi4+0x8c>
 8000498:	4541      	cmp	r1, r8
 800049a:	d2ab      	bcs.n	80003f4 <__udivmoddi4+0x1f0>
 800049c:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a0:	eb69 020e 	sbc.w	r2, r9, lr
 80004a4:	3801      	subs	r0, #1
 80004a6:	4613      	mov	r3, r2
 80004a8:	e7a4      	b.n	80003f4 <__udivmoddi4+0x1f0>
 80004aa:	4660      	mov	r0, ip
 80004ac:	e7e9      	b.n	8000482 <__udivmoddi4+0x27e>
 80004ae:	4618      	mov	r0, r3
 80004b0:	e795      	b.n	80003de <__udivmoddi4+0x1da>
 80004b2:	4667      	mov	r7, ip
 80004b4:	e7d1      	b.n	800045a <__udivmoddi4+0x256>
 80004b6:	4681      	mov	r9, r0
 80004b8:	e77c      	b.n	80003b4 <__udivmoddi4+0x1b0>
 80004ba:	3802      	subs	r0, #2
 80004bc:	442c      	add	r4, r5
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0x14c>
 80004c0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c4:	442b      	add	r3, r5
 80004c6:	e72f      	b.n	8000328 <__udivmoddi4+0x124>
 80004c8:	4638      	mov	r0, r7
 80004ca:	e708      	b.n	80002de <__udivmoddi4+0xda>
 80004cc:	4637      	mov	r7, r6
 80004ce:	e6e9      	b.n	80002a4 <__udivmoddi4+0xa0>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d8:	f000 fc7a 	bl	8000dd0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004dc:	f000 f818 	bl	8000510 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e0:	f000 f8e2 	bl	80006a8 <MX_GPIO_Init>
  MX_SPI1_Init();
 80004e4:	f000 f880 	bl	80005e8 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80004e8:	f000 f8b4 	bl	8000654 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  /* RESET DISPLAY */
  Reset_Device();
 80004ec:	f000 f932 	bl	8000754 <Reset_Device>
  Init_Device();
 80004f0:	f000 f954 	bl	800079c <Init_Device>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  FillDisplay();
 80004f4:	f000 fa53 	bl	800099e <FillDisplay>
	  HAL_Delay(1000);
 80004f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004fc:	f000 fcda 	bl	8000eb4 <HAL_Delay>
	  ClearDisplay();
 8000500:	f000 fa08 	bl	8000914 <ClearDisplay>
	  HAL_Delay(1000);
 8000504:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000508:	f000 fcd4 	bl	8000eb4 <HAL_Delay>
	  FillDisplay();
 800050c:	e7f2      	b.n	80004f4 <main+0x20>
	...

08000510 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b094      	sub	sp, #80	; 0x50
 8000514:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000516:	f107 0320 	add.w	r3, r7, #32
 800051a:	2230      	movs	r2, #48	; 0x30
 800051c:	2100      	movs	r1, #0
 800051e:	4618      	mov	r0, r3
 8000520:	f002 f9f4 	bl	800290c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000524:	f107 030c 	add.w	r3, r7, #12
 8000528:	2200      	movs	r2, #0
 800052a:	601a      	str	r2, [r3, #0]
 800052c:	605a      	str	r2, [r3, #4]
 800052e:	609a      	str	r2, [r3, #8]
 8000530:	60da      	str	r2, [r3, #12]
 8000532:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000534:	2300      	movs	r3, #0
 8000536:	60bb      	str	r3, [r7, #8]
 8000538:	4b29      	ldr	r3, [pc, #164]	; (80005e0 <SystemClock_Config+0xd0>)
 800053a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800053c:	4a28      	ldr	r2, [pc, #160]	; (80005e0 <SystemClock_Config+0xd0>)
 800053e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000542:	6413      	str	r3, [r2, #64]	; 0x40
 8000544:	4b26      	ldr	r3, [pc, #152]	; (80005e0 <SystemClock_Config+0xd0>)
 8000546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000548:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800054c:	60bb      	str	r3, [r7, #8]
 800054e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000550:	2300      	movs	r3, #0
 8000552:	607b      	str	r3, [r7, #4]
 8000554:	4b23      	ldr	r3, [pc, #140]	; (80005e4 <SystemClock_Config+0xd4>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800055c:	4a21      	ldr	r2, [pc, #132]	; (80005e4 <SystemClock_Config+0xd4>)
 800055e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000562:	6013      	str	r3, [r2, #0]
 8000564:	4b1f      	ldr	r3, [pc, #124]	; (80005e4 <SystemClock_Config+0xd4>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800056c:	607b      	str	r3, [r7, #4]
 800056e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000570:	2301      	movs	r3, #1
 8000572:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000574:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000578:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800057a:	2302      	movs	r3, #2
 800057c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800057e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000582:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000584:	2319      	movs	r3, #25
 8000586:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 128;
 8000588:	2380      	movs	r3, #128	; 0x80
 800058a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800058c:	2302      	movs	r3, #2
 800058e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000590:	2304      	movs	r3, #4
 8000592:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000594:	f107 0320 	add.w	r3, r7, #32
 8000598:	4618      	mov	r0, r3
 800059a:	f000 ff49 	bl	8001430 <HAL_RCC_OscConfig>
 800059e:	4603      	mov	r3, r0
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d001      	beq.n	80005a8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80005a4:	f000 faee 	bl	8000b84 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005a8:	230f      	movs	r3, #15
 80005aa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ac:	2302      	movs	r3, #2
 80005ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b0:	2300      	movs	r3, #0
 80005b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005b8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80005ba:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005be:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005c0:	f107 030c 	add.w	r3, r7, #12
 80005c4:	2102      	movs	r1, #2
 80005c6:	4618      	mov	r0, r3
 80005c8:	f001 f9a2 	bl	8001910 <HAL_RCC_ClockConfig>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80005d2:	f000 fad7 	bl	8000b84 <Error_Handler>
  }
}
 80005d6:	bf00      	nop
 80005d8:	3750      	adds	r7, #80	; 0x50
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	40023800 	.word	0x40023800
 80005e4:	40007000 	.word	0x40007000

080005e8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80005ec:	4b17      	ldr	r3, [pc, #92]	; (800064c <MX_SPI1_Init+0x64>)
 80005ee:	4a18      	ldr	r2, [pc, #96]	; (8000650 <MX_SPI1_Init+0x68>)
 80005f0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80005f2:	4b16      	ldr	r3, [pc, #88]	; (800064c <MX_SPI1_Init+0x64>)
 80005f4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80005f8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80005fa:	4b14      	ldr	r3, [pc, #80]	; (800064c <MX_SPI1_Init+0x64>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000600:	4b12      	ldr	r3, [pc, #72]	; (800064c <MX_SPI1_Init+0x64>)
 8000602:	2200      	movs	r2, #0
 8000604:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000606:	4b11      	ldr	r3, [pc, #68]	; (800064c <MX_SPI1_Init+0x64>)
 8000608:	2200      	movs	r2, #0
 800060a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800060c:	4b0f      	ldr	r3, [pc, #60]	; (800064c <MX_SPI1_Init+0x64>)
 800060e:	2200      	movs	r2, #0
 8000610:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000612:	4b0e      	ldr	r3, [pc, #56]	; (800064c <MX_SPI1_Init+0x64>)
 8000614:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000618:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800061a:	4b0c      	ldr	r3, [pc, #48]	; (800064c <MX_SPI1_Init+0x64>)
 800061c:	2218      	movs	r2, #24
 800061e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000620:	4b0a      	ldr	r3, [pc, #40]	; (800064c <MX_SPI1_Init+0x64>)
 8000622:	2200      	movs	r2, #0
 8000624:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000626:	4b09      	ldr	r3, [pc, #36]	; (800064c <MX_SPI1_Init+0x64>)
 8000628:	2200      	movs	r2, #0
 800062a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800062c:	4b07      	ldr	r3, [pc, #28]	; (800064c <MX_SPI1_Init+0x64>)
 800062e:	2200      	movs	r2, #0
 8000630:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000632:	4b06      	ldr	r3, [pc, #24]	; (800064c <MX_SPI1_Init+0x64>)
 8000634:	220a      	movs	r2, #10
 8000636:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000638:	4804      	ldr	r0, [pc, #16]	; (800064c <MX_SPI1_Init+0x64>)
 800063a:	f001 fb35 	bl	8001ca8 <HAL_SPI_Init>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000644:	f000 fa9e 	bl	8000b84 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000648:	bf00      	nop
 800064a:	bd80      	pop	{r7, pc}
 800064c:	20000070 	.word	0x20000070
 8000650:	40013000 	.word	0x40013000

08000654 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000658:	4b11      	ldr	r3, [pc, #68]	; (80006a0 <MX_USART1_UART_Init+0x4c>)
 800065a:	4a12      	ldr	r2, [pc, #72]	; (80006a4 <MX_USART1_UART_Init+0x50>)
 800065c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800065e:	4b10      	ldr	r3, [pc, #64]	; (80006a0 <MX_USART1_UART_Init+0x4c>)
 8000660:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000664:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000666:	4b0e      	ldr	r3, [pc, #56]	; (80006a0 <MX_USART1_UART_Init+0x4c>)
 8000668:	2200      	movs	r2, #0
 800066a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800066c:	4b0c      	ldr	r3, [pc, #48]	; (80006a0 <MX_USART1_UART_Init+0x4c>)
 800066e:	2200      	movs	r2, #0
 8000670:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000672:	4b0b      	ldr	r3, [pc, #44]	; (80006a0 <MX_USART1_UART_Init+0x4c>)
 8000674:	2200      	movs	r2, #0
 8000676:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000678:	4b09      	ldr	r3, [pc, #36]	; (80006a0 <MX_USART1_UART_Init+0x4c>)
 800067a:	220c      	movs	r2, #12
 800067c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800067e:	4b08      	ldr	r3, [pc, #32]	; (80006a0 <MX_USART1_UART_Init+0x4c>)
 8000680:	2200      	movs	r2, #0
 8000682:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000684:	4b06      	ldr	r3, [pc, #24]	; (80006a0 <MX_USART1_UART_Init+0x4c>)
 8000686:	2200      	movs	r2, #0
 8000688:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800068a:	4805      	ldr	r0, [pc, #20]	; (80006a0 <MX_USART1_UART_Init+0x4c>)
 800068c:	f001 fd50 	bl	8002130 <HAL_UART_Init>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000696:	f000 fa75 	bl	8000b84 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800069a:	bf00      	nop
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	20000030 	.word	0x20000030
 80006a4:	40011000 	.word	0x40011000

080006a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b088      	sub	sp, #32
 80006ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ae:	f107 030c 	add.w	r3, r7, #12
 80006b2:	2200      	movs	r2, #0
 80006b4:	601a      	str	r2, [r3, #0]
 80006b6:	605a      	str	r2, [r3, #4]
 80006b8:	609a      	str	r2, [r3, #8]
 80006ba:	60da      	str	r2, [r3, #12]
 80006bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006be:	2300      	movs	r3, #0
 80006c0:	60bb      	str	r3, [r7, #8]
 80006c2:	4b22      	ldr	r3, [pc, #136]	; (800074c <MX_GPIO_Init+0xa4>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c6:	4a21      	ldr	r2, [pc, #132]	; (800074c <MX_GPIO_Init+0xa4>)
 80006c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006cc:	6313      	str	r3, [r2, #48]	; 0x30
 80006ce:	4b1f      	ldr	r3, [pc, #124]	; (800074c <MX_GPIO_Init+0xa4>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006d6:	60bb      	str	r3, [r7, #8]
 80006d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006da:	2300      	movs	r3, #0
 80006dc:	607b      	str	r3, [r7, #4]
 80006de:	4b1b      	ldr	r3, [pc, #108]	; (800074c <MX_GPIO_Init+0xa4>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e2:	4a1a      	ldr	r2, [pc, #104]	; (800074c <MX_GPIO_Init+0xa4>)
 80006e4:	f043 0301 	orr.w	r3, r3, #1
 80006e8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ea:	4b18      	ldr	r3, [pc, #96]	; (800074c <MX_GPIO_Init+0xa4>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ee:	f003 0301 	and.w	r3, r3, #1
 80006f2:	607b      	str	r3, [r7, #4]
 80006f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006f6:	2300      	movs	r3, #0
 80006f8:	603b      	str	r3, [r7, #0]
 80006fa:	4b14      	ldr	r3, [pc, #80]	; (800074c <MX_GPIO_Init+0xa4>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	4a13      	ldr	r2, [pc, #76]	; (800074c <MX_GPIO_Init+0xa4>)
 8000700:	f043 0302 	orr.w	r3, r3, #2
 8000704:	6313      	str	r3, [r2, #48]	; 0x30
 8000706:	4b11      	ldr	r3, [pc, #68]	; (800074c <MX_GPIO_Init+0xa4>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	f003 0302 	and.w	r3, r3, #2
 800070e:	603b      	str	r3, [r7, #0]
 8000710:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RST_Pin|CS_Pin, GPIO_PIN_SET);
 8000712:	2201      	movs	r2, #1
 8000714:	2105      	movs	r1, #5
 8000716:	480e      	ldr	r0, [pc, #56]	; (8000750 <MX_GPIO_Init+0xa8>)
 8000718:	f000 fe56 	bl	80013c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_RESET);
 800071c:	2200      	movs	r2, #0
 800071e:	2102      	movs	r1, #2
 8000720:	480b      	ldr	r0, [pc, #44]	; (8000750 <MX_GPIO_Init+0xa8>)
 8000722:	f000 fe51 	bl	80013c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RST_Pin DC_Pin CS_Pin */
  GPIO_InitStruct.Pin = RST_Pin|DC_Pin|CS_Pin;
 8000726:	2307      	movs	r3, #7
 8000728:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800072a:	2301      	movs	r3, #1
 800072c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072e:	2300      	movs	r3, #0
 8000730:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000732:	2300      	movs	r3, #0
 8000734:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000736:	f107 030c 	add.w	r3, r7, #12
 800073a:	4619      	mov	r1, r3
 800073c:	4804      	ldr	r0, [pc, #16]	; (8000750 <MX_GPIO_Init+0xa8>)
 800073e:	f000 fcc1 	bl	80010c4 <HAL_GPIO_Init>

}
 8000742:	bf00      	nop
 8000744:	3720      	adds	r7, #32
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	40023800 	.word	0x40023800
 8000750:	40020400 	.word	0x40020400

08000754 <Reset_Device>:

/* USER CODE BEGIN 4 */

void Reset_Device(void) {
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
//	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
//	HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_RESET); // Ставми DC в low
	HAL_Delay(500);
 8000758:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800075c:	f000 fbaa 	bl	8000eb4 <HAL_Delay>
	HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_RESET); // Ставми RESET в low
 8000760:	2200      	movs	r2, #0
 8000762:	2101      	movs	r1, #1
 8000764:	480c      	ldr	r0, [pc, #48]	; (8000798 <Reset_Device+0x44>)
 8000766:	f000 fe2f 	bl	80013c8 <HAL_GPIO_WritePin>
	HAL_Delay(2); // t1 минимум 0.1 милисекунда
 800076a:	2002      	movs	r0, #2
 800076c:	f000 fba2 	bl	8000eb4 <HAL_Delay>
	HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_SET); // Ставми RESET в h
 8000770:	2201      	movs	r2, #1
 8000772:	2101      	movs	r1, #1
 8000774:	4808      	ldr	r0, [pc, #32]	; (8000798 <Reset_Device+0x44>)
 8000776:	f000 fe27 	bl	80013c8 <HAL_GPIO_WritePin>
	HAL_Delay(200); // t2 = t1 + HAL_Delay(1)
 800077a:	20c8      	movs	r0, #200	; 0xc8
 800077c:	f000 fb9a 	bl	8000eb4 <HAL_Delay>
	displaySend(SEND_CMD, SET_DISP_OFF);
 8000780:	23af      	movs	r3, #175	; 0xaf
 8000782:	4619      	mov	r1, r3
 8000784:	2001      	movs	r0, #1
 8000786:	f000 f99f 	bl	8000ac8 <displaySend>
	HAL_Delay(400); // t AF
 800078a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800078e:	f000 fb91 	bl	8000eb4 <HAL_Delay>

}
 8000792:	bf00      	nop
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	40020400 	.word	0x40020400

0800079c <Init_Device>:

void Init_Device(void) {
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
	displaySend(SEND_CMD, SET_COMMAND_LOCK); 			// 0xFD Устанавливаем блокировку комманд дисплея
 80007a0:	23fd      	movs	r3, #253	; 0xfd
 80007a2:	4619      	mov	r1, r3
 80007a4:	2001      	movs	r0, #1
 80007a6:	f000 f98f 	bl	8000ac8 <displaySend>
	displaySend(SEND_DATA, 0x12);		 				// 0x12 0x12 = Заблокировано; 0x16 = Разблокировано
 80007aa:	2112      	movs	r1, #18
 80007ac:	2002      	movs	r0, #2
 80007ae:	f000 f98b 	bl	8000ac8 <displaySend>
	displaySend(SEND_CMD, SET_DISP_MODE_OFF);			// 0xA4 Выключаем дисплей
 80007b2:	23a6      	movs	r3, #166	; 0xa6
 80007b4:	4619      	mov	r1, r3
 80007b6:	2001      	movs	r0, #1
 80007b8:	f000 f986 	bl	8000ac8 <displaySend>
	displaySend(SEND_CMD, SET_FRONT_DIV_OSC_FRQ); 		// 0xB3 Устанавливаем коэффициент деления DCLK и частоту CLK
 80007bc:	23b3      	movs	r3, #179	; 0xb3
 80007be:	4619      	mov	r1, r3
 80007c0:	2001      	movs	r0, #1
 80007c2:	f000 f981 	bl	8000ac8 <displaySend>
	// A[3:0] Коэффициент деления (1-1024) [0001] - деление на 2
	// A[7:4] Частота [1001]
	displaySend(SEND_DATA, 0x91);						// 0x91 0b10010001
 80007c6:	2191      	movs	r1, #145	; 0x91
 80007c8:	2002      	movs	r0, #2
 80007ca:	f000 f97d 	bl	8000ac8 <displaySend>
	displaySend(SEND_CMD, SET_MULTIPLEX_RATIO);			// 0xCA Установка включенных выводов COM (Set MUX Ratio)
 80007ce:	23cb      	movs	r3, #203	; 0xcb
 80007d0:	4619      	mov	r1, r3
 80007d2:	2001      	movs	r0, #1
 80007d4:	f000 f978 	bl	8000ac8 <displaySend>
	displaySend(SEND_DATA, 0x7F);						// 0x7F Включает все 128 выводов по горизонтали
 80007d8:	217f      	movs	r1, #127	; 0x7f
 80007da:	2002      	movs	r0, #2
 80007dc:	f000 f974 	bl	8000ac8 <displaySend>
	displaySend(SEND_CMD, SET_DISP_OFSET);				// 0xA2 Задаёт привязку начальной строки экрана
 80007e0:	23a2      	movs	r3, #162	; 0xa2
 80007e2:	4619      	mov	r1, r3
 80007e4:	2001      	movs	r0, #1
 80007e6:	f000 f96f 	bl	8000ac8 <displaySend>
	displaySend(SEND_DATA, 0x00);						// 0x00 Начальная строка ROW0
 80007ea:	2100      	movs	r1, #0
 80007ec:	2002      	movs	r0, #2
 80007ee:	f000 f96b 	bl	8000ac8 <displaySend>
	displaySend(SEND_CMD, SET_START_LINE);				// 0xA1 Начальная строка отображения
 80007f2:	23a1      	movs	r3, #161	; 0xa1
 80007f4:	4619      	mov	r1, r3
 80007f6:	2001      	movs	r0, #1
 80007f8:	f000 f966 	bl	8000ac8 <displaySend>
	displaySend(SEND_DATA, 0x00); 						// 0x00	Начальная строка ROW0
 80007fc:	2100      	movs	r1, #0
 80007fe:	2002      	movs	r0, #2
 8000800:	f000 f962 	bl	8000ac8 <displaySend>
	displaySend(SEND_CMD, SET_LINE_MODE);				// 0xA0 Настройка последовательности отображения пикселей
 8000804:	23a0      	movs	r3, #160	; 0xa0
 8000806:	4619      	mov	r1, r3
 8000808:	2001      	movs	r0, #1
 800080a:	f000 f95d 	bl	8000ac8 <displaySend>
	displaySend(SEND_DATA, 0x10); 						// 0x10 00010000
 800080e:	2110      	movs	r1, #16
 8000810:	2002      	movs	r0, #2
 8000812:	f000 f959 	bl	8000ac8 <displaySend>
	 * A[4] = 1: сканирование снизу вверх
	 * A[5] = 0 (состояние по умолчанию после сброса): запрет разделения COM на четные / нечетные, назначение выводов COM последовательное, COM127, COM126...COM65, COM64...SEG479...SEG0...COM0 COM1...COM62, COM63
	 * A[6] = 0
	 * A[7] = 0
	 * */
	displaySend(SEND_DATA, 0x01); 						// 0x11 00000001
 8000816:	2101      	movs	r1, #1
 8000818:	2002      	movs	r0, #2
 800081a:	f000 f955 	bl	8000ac8 <displaySend>
	/* B[4] = 0 (состояние по умолчанию после сброса): двойной режим для COM запрещен, см. рис. 10-6
	 * */
	displaySend(SEND_CMD, SET_GPIO); 					// 0xB5 Управление GPIO дисплея
 800081e:	23b5      	movs	r3, #181	; 0xb5
 8000820:	4619      	mov	r1, r3
 8000822:	2001      	movs	r0, #1
 8000824:	f000 f950 	bl	8000ac8 <displaySend>
	displaySend(SEND_DATA, 0x00); 						// 0x00 Выключены
 8000828:	2100      	movs	r1, #0
 800082a:	2002      	movs	r0, #2
 800082c:	f000 f94c 	bl	8000ac8 <displaySend>
	displaySend(SEND_CMD, SET_FUNCTION);				// 0xAB Питание ядра VDD
 8000830:	23ab      	movs	r3, #171	; 0xab
 8000832:	4619      	mov	r1, r3
 8000834:	2001      	movs	r0, #1
 8000836:	f000 f947 	bl	8000ac8 <displaySend>
	displaySend(SEND_DATA, 0x01); 						// 0x01 внутренний регулятор
 800083a:	2101      	movs	r1, #1
 800083c:	2002      	movs	r0, #2
 800083e:	f000 f943 	bl	8000ac8 <displaySend>
	displaySend(SEND_CMD, SET_DISP_ENH_A); 				// 0xB4 регулировка А
 8000842:	23b4      	movs	r3, #180	; 0xb4
 8000844:	4619      	mov	r1, r3
 8000846:	2001      	movs	r0, #1
 8000848:	f000 f93e 	bl	8000ac8 <displaySend>
	displaySend(SEND_DATA, 0xA2); 						// 0xA2 A[1:0] = 10b: Internal VSL [reset]
 800084c:	21a2      	movs	r1, #162	; 0xa2
 800084e:	2002      	movs	r0, #2
 8000850:	f000 f93a 	bl	8000ac8 <displaySend>
	displaySend(SEND_DATA, 0xB5); 						// 0xB5 B[7:3] = 10110b: Normal [reset]
 8000854:	21b5      	movs	r1, #181	; 0xb5
 8000856:	2002      	movs	r0, #2
 8000858:	f000 f936 	bl	8000ac8 <displaySend>
	displaySend(SEND_CMD, SET_CONTRAST); 				// 0xC1 Установка контраста 00h-ffh
 800085c:	23c1      	movs	r3, #193	; 0xc1
 800085e:	4619      	mov	r1, r3
 8000860:	2001      	movs	r0, #1
 8000862:	f000 f931 	bl	8000ac8 <displaySend>
	displaySend(SEND_DATA, 0x7F); 						// 0x7F Контраст
 8000866:	217f      	movs	r1, #127	; 0x7f
 8000868:	2002      	movs	r0, #2
 800086a:	f000 f92d 	bl	8000ac8 <displaySend>
	displaySend(SEND_CMD, SET_MASTER_CURRENT); 			// 0xC7 управления выходным током SEG
 800086e:	23c7      	movs	r3, #199	; 0xc7
 8000870:	4619      	mov	r1, r3
 8000872:	2001      	movs	r0, #1
 8000874:	f000 f928 	bl	8000ac8 <displaySend>
	displaySend(SEND_DATA, 0x0F); 						// 0x0F A[3:0] = 1111b, без изменений (состояние после сброса)
 8000878:	210f      	movs	r1, #15
 800087a:	2002      	movs	r0, #2
 800087c:	f000 f924 	bl	8000ac8 <displaySend>
	displaySend(SEND_CMD, SEL_DEF_LINEAR_GST); 			// 0xB9
 8000880:	23b9      	movs	r3, #185	; 0xb9
 8000882:	4619      	mov	r1, r3
 8000884:	2001      	movs	r0, #1
 8000886:	f000 f91f 	bl	8000ac8 <displaySend>
	displaySend(SEND_CMD, SET_PHASE_LEN); 				// 0xB1
 800088a:	23b1      	movs	r3, #177	; 0xb1
 800088c:	4619      	mov	r1, r3
 800088e:	2001      	movs	r0, #1
 8000890:	f000 f91a 	bl	8000ac8 <displaySend>
	displaySend(SEND_DATA, 0xE2); 						// 0xE2
 8000894:	21e2      	movs	r1, #226	; 0xe2
 8000896:	2002      	movs	r0, #2
 8000898:	f000 f916 	bl	8000ac8 <displaySend>
	//        Phase 2 period (first pre-charge phase length) = 14 DCLKs
    displaySend(SEND_CMD, SET_DISP_ENH_B); 				// 0xD1
 800089c:	23d1      	movs	r3, #209	; 0xd1
 800089e:	4619      	mov	r1, r3
 80008a0:	2001      	movs	r0, #1
 80008a2:	f000 f911 	bl	8000ac8 <displaySend>
    displaySend(SEND_DATA, 0xA2); 						// 0xA2
 80008a6:	21a2      	movs	r1, #162	; 0xa2
 80008a8:	2002      	movs	r0, #2
 80008aa:	f000 f90d 	bl	8000ac8 <displaySend>
    displaySend(SEND_DATA, 0x20); 						// 0x20
 80008ae:	2120      	movs	r1, #32
 80008b0:	2002      	movs	r0, #2
 80008b2:	f000 f909 	bl	8000ac8 <displaySend>
    displaySend(SEND_CMD, SET_PRE_CHG_VOLTAGE); 		// 0xBB
 80008b6:	23bb      	movs	r3, #187	; 0xbb
 80008b8:	4619      	mov	r1, r3
 80008ba:	2001      	movs	r0, #1
 80008bc:	f000 f904 	bl	8000ac8 <displaySend>
    displaySend(SEND_DATA, 0x17); 						// 0x17
 80008c0:	2117      	movs	r1, #23
 80008c2:	2002      	movs	r0, #2
 80008c4:	f000 f900 	bl	8000ac8 <displaySend>
    displaySend(SEND_CMD, SET_PRE_CHARGE_PERIOD); 		// 0xB6
 80008c8:	23b6      	movs	r3, #182	; 0xb6
 80008ca:	4619      	mov	r1, r3
 80008cc:	2001      	movs	r0, #1
 80008ce:	f000 f8fb 	bl	8000ac8 <displaySend>
    displaySend(SEND_DATA, 0x08); 						// 0x08
 80008d2:	2108      	movs	r1, #8
 80008d4:	2002      	movs	r0, #2
 80008d6:	f000 f8f7 	bl	8000ac8 <displaySend>
    displaySend(SEND_CMD, SET_VCOMH); 					// 0xBE
 80008da:	23be      	movs	r3, #190	; 0xbe
 80008dc:	4619      	mov	r1, r3
 80008de:	2001      	movs	r0, #1
 80008e0:	f000 f8f2 	bl	8000ac8 <displaySend>
    displaySend(SEND_DATA, 0x04); 						// 0x04
 80008e4:	2104      	movs	r1, #4
 80008e6:	2002      	movs	r0, #2
 80008e8:	f000 f8ee 	bl	8000ac8 <displaySend>
    displaySend(SEND_CMD, SET_DISP_MODE_NORMAL); 		// 0xA6
 80008ec:	23a4      	movs	r3, #164	; 0xa4
 80008ee:	4619      	mov	r1, r3
 80008f0:	2001      	movs	r0, #1
 80008f2:	f000 f8e9 	bl	8000ac8 <displaySend>
    displaySend(SEND_CMD, PARTAL_DISP_DISABLE); 		// 0xA9
 80008f6:	23a9      	movs	r3, #169	; 0xa9
 80008f8:	4619      	mov	r1, r3
 80008fa:	2001      	movs	r0, #1
 80008fc:	f000 f8e4 	bl	8000ac8 <displaySend>
    displaySend(SEND_CMD, SET_DISP_MODE_ON); 			// 0xA5
 8000900:	23a5      	movs	r3, #165	; 0xa5
 8000902:	4619      	mov	r1, r3
 8000904:	2001      	movs	r0, #1
 8000906:	f000 f8df 	bl	8000ac8 <displaySend>
    HAL_Delay(10);
 800090a:	200a      	movs	r0, #10
 800090c:	f000 fad2 	bl	8000eb4 <HAL_Delay>

}
 8000910:	bf00      	nop
 8000912:	bd80      	pop	{r7, pc}

08000914 <ClearDisplay>:

void ClearDisplay(void){
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
	displaySend(SEND_CMD, SET_DISP_MODE_NORMAL);
 800091a:	23a4      	movs	r3, #164	; 0xa4
 800091c:	4619      	mov	r1, r3
 800091e:	2001      	movs	r0, #1
 8000920:	f000 f8d2 	bl	8000ac8 <displaySend>
	Set_Column_Address(0x00, MAXCOLS-1);
 8000924:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000928:	b2db      	uxtb	r3, r3
 800092a:	3b01      	subs	r3, #1
 800092c:	b2db      	uxtb	r3, r3
 800092e:	4619      	mov	r1, r3
 8000930:	2000      	movs	r0, #0
 8000932:	f000 f86f 	bl	8000a14 <Set_Column_Address>
	Set_Row_Address(0x00, MAXROWS-1);
 8000936:	2340      	movs	r3, #64	; 0x40
 8000938:	b2db      	uxtb	r3, r3
 800093a:	3b01      	subs	r3, #1
 800093c:	b2db      	uxtb	r3, r3
 800093e:	4619      	mov	r1, r3
 8000940:	2000      	movs	r0, #0
 8000942:	f000 f897 	bl	8000a74 <Set_Row_Address>
	Set_Write_RAM();
 8000946:	f000 f8b7 	bl	8000ab8 <Set_Write_RAM>
	displaySendType(SEND_DATA);
 800094a:	2002      	movs	r0, #2
 800094c:	f000 f8d8 	bl	8000b00 <displaySendType>
    for(int i=0; i<MAXROWS; i++)
 8000950:	2300      	movs	r3, #0
 8000952:	607b      	str	r3, [r7, #4]
 8000954:	e013      	b.n	800097e <ClearDisplay+0x6a>
    {
        for(int j=0; j<MAXCOLS/2; j++)
 8000956:	2300      	movs	r3, #0
 8000958:	603b      	str	r3, [r7, #0]
 800095a:	e005      	b.n	8000968 <ClearDisplay+0x54>
        {
            displaySendData(0x00);
 800095c:	2000      	movs	r0, #0
 800095e:	f000 f8f1 	bl	8000b44 <displaySendData>
        for(int j=0; j<MAXCOLS/2; j++)
 8000962:	683b      	ldr	r3, [r7, #0]
 8000964:	3301      	adds	r3, #1
 8000966:	603b      	str	r3, [r7, #0]
 8000968:	f44f 7380 	mov.w	r3, #256	; 0x100
 800096c:	085b      	lsrs	r3, r3, #1
 800096e:	b29b      	uxth	r3, r3
 8000970:	461a      	mov	r2, r3
 8000972:	683b      	ldr	r3, [r7, #0]
 8000974:	4293      	cmp	r3, r2
 8000976:	dbf1      	blt.n	800095c <ClearDisplay+0x48>
    for(int i=0; i<MAXROWS; i++)
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	3301      	adds	r3, #1
 800097c:	607b      	str	r3, [r7, #4]
 800097e:	2340      	movs	r3, #64	; 0x40
 8000980:	461a      	mov	r2, r3
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	4293      	cmp	r3, r2
 8000986:	dbe6      	blt.n	8000956 <ClearDisplay+0x42>
        }
    }
    displaySendEnd();
 8000988:	f000 f8f0 	bl	8000b6c <displaySendEnd>
    displaySend(SEND_CMD, SET_DISP_MODE_OFF);
 800098c:	23a6      	movs	r3, #166	; 0xa6
 800098e:	4619      	mov	r1, r3
 8000990:	2001      	movs	r0, #1
 8000992:	f000 f899 	bl	8000ac8 <displaySend>
}
 8000996:	bf00      	nop
 8000998:	3708      	adds	r7, #8
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}

0800099e <FillDisplay>:

void FillDisplay(void) {
 800099e:	b580      	push	{r7, lr}
 80009a0:	b082      	sub	sp, #8
 80009a2:	af00      	add	r7, sp, #0
	Set_Column_Address(0x00, MAXCOLS-1);
 80009a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009a8:	b2db      	uxtb	r3, r3
 80009aa:	3b01      	subs	r3, #1
 80009ac:	b2db      	uxtb	r3, r3
 80009ae:	4619      	mov	r1, r3
 80009b0:	2000      	movs	r0, #0
 80009b2:	f000 f82f 	bl	8000a14 <Set_Column_Address>
	Set_Row_Address(0x00, MAXROWS-1);
 80009b6:	2340      	movs	r3, #64	; 0x40
 80009b8:	b2db      	uxtb	r3, r3
 80009ba:	3b01      	subs	r3, #1
 80009bc:	b2db      	uxtb	r3, r3
 80009be:	4619      	mov	r1, r3
 80009c0:	2000      	movs	r0, #0
 80009c2:	f000 f857 	bl	8000a74 <Set_Row_Address>
	Set_Write_RAM();
 80009c6:	f000 f877 	bl	8000ab8 <Set_Write_RAM>
	displaySendType(SEND_DATA);
 80009ca:	2002      	movs	r0, #2
 80009cc:	f000 f898 	bl	8000b00 <displaySendType>
	for(int i=0; i<MAXROWS; i++)
 80009d0:	2300      	movs	r3, #0
 80009d2:	607b      	str	r3, [r7, #4]
 80009d4:	e013      	b.n	80009fe <FillDisplay+0x60>
	{
		for(int j=0; j<MAXCOLS/2; j++)
 80009d6:	2300      	movs	r3, #0
 80009d8:	603b      	str	r3, [r7, #0]
 80009da:	e005      	b.n	80009e8 <FillDisplay+0x4a>
		{
			displaySendData(0xFF);
 80009dc:	20ff      	movs	r0, #255	; 0xff
 80009de:	f000 f8b1 	bl	8000b44 <displaySendData>
		for(int j=0; j<MAXCOLS/2; j++)
 80009e2:	683b      	ldr	r3, [r7, #0]
 80009e4:	3301      	adds	r3, #1
 80009e6:	603b      	str	r3, [r7, #0]
 80009e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009ec:	085b      	lsrs	r3, r3, #1
 80009ee:	b29b      	uxth	r3, r3
 80009f0:	461a      	mov	r2, r3
 80009f2:	683b      	ldr	r3, [r7, #0]
 80009f4:	4293      	cmp	r3, r2
 80009f6:	dbf1      	blt.n	80009dc <FillDisplay+0x3e>
	for(int i=0; i<MAXROWS; i++)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	3301      	adds	r3, #1
 80009fc:	607b      	str	r3, [r7, #4]
 80009fe:	2340      	movs	r3, #64	; 0x40
 8000a00:	461a      	mov	r2, r3
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	4293      	cmp	r3, r2
 8000a06:	dbe6      	blt.n	80009d6 <FillDisplay+0x38>
		}
	}
	displaySendEnd();
 8000a08:	f000 f8b0 	bl	8000b6c <displaySendEnd>
}
 8000a0c:	bf00      	nop
 8000a0e:	3708      	adds	r7, #8
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}

08000a14 <Set_Column_Address>:

void Set_Column_Address(unsigned char a, unsigned char b)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	460a      	mov	r2, r1
 8000a1e:	71fb      	strb	r3, [r7, #7]
 8000a20:	4613      	mov	r3, r2
 8000a22:	71bb      	strb	r3, [r7, #6]
    curDisplayCol = a;
 8000a24:	79fb      	ldrb	r3, [r7, #7]
 8000a26:	b29a      	uxth	r2, r3
 8000a28:	4b11      	ldr	r3, [pc, #68]	; (8000a70 <Set_Column_Address+0x5c>)
 8000a2a:	801a      	strh	r2, [r3, #0]
    displaySend(SEND_CMD, SET_START_LINE);
 8000a2c:	23a1      	movs	r3, #161	; 0xa1
 8000a2e:	4619      	mov	r1, r3
 8000a30:	2001      	movs	r0, #1
 8000a32:	f000 f849 	bl	8000ac8 <displaySend>
    displaySend(SEND_DATA, (Col0Off+a)/ColDiv);
 8000a36:	2370      	movs	r3, #112	; 0x70
 8000a38:	461a      	mov	r2, r3
 8000a3a:	79fb      	ldrb	r3, [r7, #7]
 8000a3c:	4413      	add	r3, r2
 8000a3e:	2204      	movs	r2, #4
 8000a40:	fb93 f3f2 	sdiv	r3, r3, r2
 8000a44:	b2db      	uxtb	r3, r3
 8000a46:	4619      	mov	r1, r3
 8000a48:	2002      	movs	r0, #2
 8000a4a:	f000 f83d 	bl	8000ac8 <displaySend>
    displaySend(SEND_DATA, (Col0Off+b)/ColDiv);
 8000a4e:	2370      	movs	r3, #112	; 0x70
 8000a50:	461a      	mov	r2, r3
 8000a52:	79bb      	ldrb	r3, [r7, #6]
 8000a54:	4413      	add	r3, r2
 8000a56:	2204      	movs	r2, #4
 8000a58:	fb93 f3f2 	sdiv	r3, r3, r2
 8000a5c:	b2db      	uxtb	r3, r3
 8000a5e:	4619      	mov	r1, r3
 8000a60:	2002      	movs	r0, #2
 8000a62:	f000 f831 	bl	8000ac8 <displaySend>
}
 8000a66:	bf00      	nop
 8000a68:	3708      	adds	r7, #8
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	2000002a 	.word	0x2000002a

08000a74 <Set_Row_Address>:

void Set_Row_Address(unsigned char a, unsigned char b)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	460a      	mov	r2, r1
 8000a7e:	71fb      	strb	r3, [r7, #7]
 8000a80:	4613      	mov	r3, r2
 8000a82:	71bb      	strb	r3, [r7, #6]
    curDisplayRow = a;
 8000a84:	79fb      	ldrb	r3, [r7, #7]
 8000a86:	b29a      	uxth	r2, r3
 8000a88:	4b0a      	ldr	r3, [pc, #40]	; (8000ab4 <Set_Row_Address+0x40>)
 8000a8a:	801a      	strh	r2, [r3, #0]
    displaySend(SEND_CMD, SET_ROW_ADDRESS);
 8000a8c:	2375      	movs	r3, #117	; 0x75
 8000a8e:	4619      	mov	r1, r3
 8000a90:	2001      	movs	r0, #1
 8000a92:	f000 f819 	bl	8000ac8 <displaySend>
    displaySend(SEND_DATA, a);
 8000a96:	79fb      	ldrb	r3, [r7, #7]
 8000a98:	4619      	mov	r1, r3
 8000a9a:	2002      	movs	r0, #2
 8000a9c:	f000 f814 	bl	8000ac8 <displaySend>
    displaySend(SEND_DATA, b);
 8000aa0:	79bb      	ldrb	r3, [r7, #6]
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	2002      	movs	r0, #2
 8000aa6:	f000 f80f 	bl	8000ac8 <displaySend>
}
 8000aaa:	bf00      	nop
 8000aac:	3708      	adds	r7, #8
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	20000028 	.word	0x20000028

08000ab8 <Set_Write_RAM>:

void Set_Write_RAM()  // Enable MCU to Write into RAM
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
    displaySend(SEND_CMD, 0x5C);
 8000abc:	215c      	movs	r1, #92	; 0x5c
 8000abe:	2001      	movs	r0, #1
 8000ac0:	f000 f802 	bl	8000ac8 <displaySend>
}
 8000ac4:	bf00      	nop
 8000ac6:	bd80      	pop	{r7, pc}

08000ac8 <displaySend>:

void displaySend(unsigned char sendType, uint8_t v) {
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	4603      	mov	r3, r0
 8000ad0:	460a      	mov	r2, r1
 8000ad2:	71fb      	strb	r3, [r7, #7]
 8000ad4:	4613      	mov	r3, r2
 8000ad6:	71bb      	strb	r3, [r7, #6]
	displaySendType(sendType); // Какой тип данных будем посылать дисплею? Данные или команду.
 8000ad8:	79fb      	ldrb	r3, [r7, #7]
 8000ada:	4618      	mov	r0, r3
 8000adc:	f000 f810 	bl	8000b00 <displaySendType>
	displaySendData(v);
 8000ae0:	79bb      	ldrb	r3, [r7, #6]
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f000 f82e 	bl	8000b44 <displaySendData>
	HAL_GPIO_TogglePin(DC_GPIO_Port, DC_Pin);
 8000ae8:	2102      	movs	r1, #2
 8000aea:	4804      	ldr	r0, [pc, #16]	; (8000afc <displaySend+0x34>)
 8000aec:	f000 fc85 	bl	80013fa <HAL_GPIO_TogglePin>
	displaySendEnd();
 8000af0:	f000 f83c 	bl	8000b6c <displaySendEnd>
}
 8000af4:	bf00      	nop
 8000af6:	3708      	adds	r7, #8
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	40020400 	.word	0x40020400

08000b00 <displaySendType>:

void displaySendType(unsigned char sendType) {
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	4603      	mov	r3, r0
 8000b08:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET); // Перед передачей данных ставим CS в 0
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	2104      	movs	r1, #4
 8000b0e:	480c      	ldr	r0, [pc, #48]	; (8000b40 <displaySendType+0x40>)
 8000b10:	f000 fc5a 	bl	80013c8 <HAL_GPIO_WritePin>
	if (sendType == SEND_DATA) {
 8000b14:	79fb      	ldrb	r3, [r7, #7]
 8000b16:	2b02      	cmp	r3, #2
 8000b18:	d105      	bne.n	8000b26 <displaySendType+0x26>
		HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_SET); // Если данные то ставим DC в 1
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	2102      	movs	r1, #2
 8000b1e:	4808      	ldr	r0, [pc, #32]	; (8000b40 <displaySendType+0x40>)
 8000b20:	f000 fc52 	bl	80013c8 <HAL_GPIO_WritePin>
	} else if (sendType == SEND_CMD) {
		HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_RESET); // Если данные то ставим DC в 0
	}
}
 8000b24:	e007      	b.n	8000b36 <displaySendType+0x36>
	} else if (sendType == SEND_CMD) {
 8000b26:	79fb      	ldrb	r3, [r7, #7]
 8000b28:	2b01      	cmp	r3, #1
 8000b2a:	d104      	bne.n	8000b36 <displaySendType+0x36>
		HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_RESET); // Если данные то ставим DC в 0
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	2102      	movs	r1, #2
 8000b30:	4803      	ldr	r0, [pc, #12]	; (8000b40 <displaySendType+0x40>)
 8000b32:	f000 fc49 	bl	80013c8 <HAL_GPIO_WritePin>
}
 8000b36:	bf00      	nop
 8000b38:	3708      	adds	r7, #8
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	40020400 	.word	0x40020400

08000b44 <displaySendData>:
void displaySendData(uint8_t v){
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b084      	sub	sp, #16
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	71fb      	strb	r3, [r7, #7]
	uint8_t aTxBuffer = v;
 8000b4e:	79fb      	ldrb	r3, [r7, #7]
 8000b50:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&hspi1, &aTxBuffer, 1, 100);
 8000b52:	f107 010f 	add.w	r1, r7, #15
 8000b56:	2364      	movs	r3, #100	; 0x64
 8000b58:	2201      	movs	r2, #1
 8000b5a:	4803      	ldr	r0, [pc, #12]	; (8000b68 <displaySendData+0x24>)
 8000b5c:	f001 f908 	bl	8001d70 <HAL_SPI_Transmit>
}
 8000b60:	bf00      	nop
 8000b62:	3710      	adds	r7, #16
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	20000070 	.word	0x20000070

08000b6c <displaySendEnd>:
void displaySendEnd(void){
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET); // После конца передачи ставим CS в 1
 8000b70:	2201      	movs	r2, #1
 8000b72:	2104      	movs	r1, #4
 8000b74:	4802      	ldr	r0, [pc, #8]	; (8000b80 <displaySendEnd+0x14>)
 8000b76:	f000 fc27 	bl	80013c8 <HAL_GPIO_WritePin>
}
 8000b7a:	bf00      	nop
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	40020400 	.word	0x40020400

08000b84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b88:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b8a:	e7fe      	b.n	8000b8a <Error_Handler+0x6>

08000b8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b083      	sub	sp, #12
 8000b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b92:	2300      	movs	r3, #0
 8000b94:	607b      	str	r3, [r7, #4]
 8000b96:	4b10      	ldr	r3, [pc, #64]	; (8000bd8 <HAL_MspInit+0x4c>)
 8000b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b9a:	4a0f      	ldr	r2, [pc, #60]	; (8000bd8 <HAL_MspInit+0x4c>)
 8000b9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ba0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ba2:	4b0d      	ldr	r3, [pc, #52]	; (8000bd8 <HAL_MspInit+0x4c>)
 8000ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ba6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000baa:	607b      	str	r3, [r7, #4]
 8000bac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bae:	2300      	movs	r3, #0
 8000bb0:	603b      	str	r3, [r7, #0]
 8000bb2:	4b09      	ldr	r3, [pc, #36]	; (8000bd8 <HAL_MspInit+0x4c>)
 8000bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb6:	4a08      	ldr	r2, [pc, #32]	; (8000bd8 <HAL_MspInit+0x4c>)
 8000bb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bbc:	6413      	str	r3, [r2, #64]	; 0x40
 8000bbe:	4b06      	ldr	r3, [pc, #24]	; (8000bd8 <HAL_MspInit+0x4c>)
 8000bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bc6:	603b      	str	r3, [r7, #0]
 8000bc8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bca:	bf00      	nop
 8000bcc:	370c      	adds	r7, #12
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	40023800 	.word	0x40023800

08000bdc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b08a      	sub	sp, #40	; 0x28
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be4:	f107 0314 	add.w	r3, r7, #20
 8000be8:	2200      	movs	r2, #0
 8000bea:	601a      	str	r2, [r3, #0]
 8000bec:	605a      	str	r2, [r3, #4]
 8000bee:	609a      	str	r2, [r3, #8]
 8000bf0:	60da      	str	r2, [r3, #12]
 8000bf2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a19      	ldr	r2, [pc, #100]	; (8000c60 <HAL_SPI_MspInit+0x84>)
 8000bfa:	4293      	cmp	r3, r2
 8000bfc:	d12b      	bne.n	8000c56 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000bfe:	2300      	movs	r3, #0
 8000c00:	613b      	str	r3, [r7, #16]
 8000c02:	4b18      	ldr	r3, [pc, #96]	; (8000c64 <HAL_SPI_MspInit+0x88>)
 8000c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c06:	4a17      	ldr	r2, [pc, #92]	; (8000c64 <HAL_SPI_MspInit+0x88>)
 8000c08:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c0c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c0e:	4b15      	ldr	r3, [pc, #84]	; (8000c64 <HAL_SPI_MspInit+0x88>)
 8000c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c16:	613b      	str	r3, [r7, #16]
 8000c18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	60fb      	str	r3, [r7, #12]
 8000c1e:	4b11      	ldr	r3, [pc, #68]	; (8000c64 <HAL_SPI_MspInit+0x88>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c22:	4a10      	ldr	r2, [pc, #64]	; (8000c64 <HAL_SPI_MspInit+0x88>)
 8000c24:	f043 0301 	orr.w	r3, r3, #1
 8000c28:	6313      	str	r3, [r2, #48]	; 0x30
 8000c2a:	4b0e      	ldr	r3, [pc, #56]	; (8000c64 <HAL_SPI_MspInit+0x88>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2e:	f003 0301 	and.w	r3, r3, #1
 8000c32:	60fb      	str	r3, [r7, #12]
 8000c34:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000c36:	23a0      	movs	r3, #160	; 0xa0
 8000c38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c3a:	2302      	movs	r3, #2
 8000c3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c42:	2303      	movs	r3, #3
 8000c44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c46:	2305      	movs	r3, #5
 8000c48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c4a:	f107 0314 	add.w	r3, r7, #20
 8000c4e:	4619      	mov	r1, r3
 8000c50:	4805      	ldr	r0, [pc, #20]	; (8000c68 <HAL_SPI_MspInit+0x8c>)
 8000c52:	f000 fa37 	bl	80010c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000c56:	bf00      	nop
 8000c58:	3728      	adds	r7, #40	; 0x28
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	40013000 	.word	0x40013000
 8000c64:	40023800 	.word	0x40023800
 8000c68:	40020000 	.word	0x40020000

08000c6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b08a      	sub	sp, #40	; 0x28
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c74:	f107 0314 	add.w	r3, r7, #20
 8000c78:	2200      	movs	r2, #0
 8000c7a:	601a      	str	r2, [r3, #0]
 8000c7c:	605a      	str	r2, [r3, #4]
 8000c7e:	609a      	str	r2, [r3, #8]
 8000c80:	60da      	str	r2, [r3, #12]
 8000c82:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a19      	ldr	r2, [pc, #100]	; (8000cf0 <HAL_UART_MspInit+0x84>)
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d12c      	bne.n	8000ce8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c8e:	2300      	movs	r3, #0
 8000c90:	613b      	str	r3, [r7, #16]
 8000c92:	4b18      	ldr	r3, [pc, #96]	; (8000cf4 <HAL_UART_MspInit+0x88>)
 8000c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c96:	4a17      	ldr	r2, [pc, #92]	; (8000cf4 <HAL_UART_MspInit+0x88>)
 8000c98:	f043 0310 	orr.w	r3, r3, #16
 8000c9c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c9e:	4b15      	ldr	r3, [pc, #84]	; (8000cf4 <HAL_UART_MspInit+0x88>)
 8000ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ca2:	f003 0310 	and.w	r3, r3, #16
 8000ca6:	613b      	str	r3, [r7, #16]
 8000ca8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000caa:	2300      	movs	r3, #0
 8000cac:	60fb      	str	r3, [r7, #12]
 8000cae:	4b11      	ldr	r3, [pc, #68]	; (8000cf4 <HAL_UART_MspInit+0x88>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb2:	4a10      	ldr	r2, [pc, #64]	; (8000cf4 <HAL_UART_MspInit+0x88>)
 8000cb4:	f043 0301 	orr.w	r3, r3, #1
 8000cb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cba:	4b0e      	ldr	r3, [pc, #56]	; (8000cf4 <HAL_UART_MspInit+0x88>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cbe:	f003 0301 	and.w	r3, r3, #1
 8000cc2:	60fb      	str	r3, [r7, #12]
 8000cc4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000cc6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000cca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ccc:	2302      	movs	r3, #2
 8000cce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cd4:	2303      	movs	r3, #3
 8000cd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000cd8:	2307      	movs	r3, #7
 8000cda:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cdc:	f107 0314 	add.w	r3, r7, #20
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	4805      	ldr	r0, [pc, #20]	; (8000cf8 <HAL_UART_MspInit+0x8c>)
 8000ce4:	f000 f9ee 	bl	80010c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000ce8:	bf00      	nop
 8000cea:	3728      	adds	r7, #40	; 0x28
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	40011000 	.word	0x40011000
 8000cf4:	40023800 	.word	0x40023800
 8000cf8:	40020000 	.word	0x40020000

08000cfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d00:	e7fe      	b.n	8000d00 <NMI_Handler+0x4>

08000d02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d02:	b480      	push	{r7}
 8000d04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d06:	e7fe      	b.n	8000d06 <HardFault_Handler+0x4>

08000d08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d0c:	e7fe      	b.n	8000d0c <MemManage_Handler+0x4>

08000d0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d0e:	b480      	push	{r7}
 8000d10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d12:	e7fe      	b.n	8000d12 <BusFault_Handler+0x4>

08000d14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d18:	e7fe      	b.n	8000d18 <UsageFault_Handler+0x4>

08000d1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d1a:	b480      	push	{r7}
 8000d1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d1e:	bf00      	nop
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr

08000d28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d2c:	bf00      	nop
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr

08000d36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d36:	b480      	push	{r7}
 8000d38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d3a:	bf00      	nop
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr

08000d44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d48:	f000 f894 	bl	8000e74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d4c:	bf00      	nop
 8000d4e:	bd80      	pop	{r7, pc}

08000d50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d54:	4b08      	ldr	r3, [pc, #32]	; (8000d78 <SystemInit+0x28>)
 8000d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d5a:	4a07      	ldr	r2, [pc, #28]	; (8000d78 <SystemInit+0x28>)
 8000d5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d64:	4b04      	ldr	r3, [pc, #16]	; (8000d78 <SystemInit+0x28>)
 8000d66:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d6a:	609a      	str	r2, [r3, #8]
#endif
}
 8000d6c:	bf00      	nop
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	e000ed00 	.word	0xe000ed00

08000d7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000db4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000d80:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000d82:	e003      	b.n	8000d8c <LoopCopyDataInit>

08000d84 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000d84:	4b0c      	ldr	r3, [pc, #48]	; (8000db8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000d86:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000d88:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000d8a:	3104      	adds	r1, #4

08000d8c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000d8c:	480b      	ldr	r0, [pc, #44]	; (8000dbc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000d8e:	4b0c      	ldr	r3, [pc, #48]	; (8000dc0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000d90:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000d92:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000d94:	d3f6      	bcc.n	8000d84 <CopyDataInit>
  ldr  r2, =_sbss
 8000d96:	4a0b      	ldr	r2, [pc, #44]	; (8000dc4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000d98:	e002      	b.n	8000da0 <LoopFillZerobss>

08000d9a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000d9a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000d9c:	f842 3b04 	str.w	r3, [r2], #4

08000da0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000da0:	4b09      	ldr	r3, [pc, #36]	; (8000dc8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000da2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000da4:	d3f9      	bcc.n	8000d9a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000da6:	f7ff ffd3 	bl	8000d50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000daa:	f001 fd8b 	bl	80028c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dae:	f7ff fb91 	bl	80004d4 <main>
  bx  lr    
 8000db2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000db4:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8000db8:	0800295c 	.word	0x0800295c
  ldr  r0, =_sdata
 8000dbc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000dc0:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8000dc4:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8000dc8:	200000cc 	.word	0x200000cc

08000dcc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dcc:	e7fe      	b.n	8000dcc <ADC_IRQHandler>
	...

08000dd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dd4:	4b0e      	ldr	r3, [pc, #56]	; (8000e10 <HAL_Init+0x40>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a0d      	ldr	r2, [pc, #52]	; (8000e10 <HAL_Init+0x40>)
 8000dda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dde:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000de0:	4b0b      	ldr	r3, [pc, #44]	; (8000e10 <HAL_Init+0x40>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a0a      	ldr	r2, [pc, #40]	; (8000e10 <HAL_Init+0x40>)
 8000de6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dec:	4b08      	ldr	r3, [pc, #32]	; (8000e10 <HAL_Init+0x40>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a07      	ldr	r2, [pc, #28]	; (8000e10 <HAL_Init+0x40>)
 8000df2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000df6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000df8:	2003      	movs	r0, #3
 8000dfa:	f000 f92f 	bl	800105c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dfe:	2000      	movs	r0, #0
 8000e00:	f000 f808 	bl	8000e14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e04:	f7ff fec2 	bl	8000b8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e08:	2300      	movs	r3, #0
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	40023c00 	.word	0x40023c00

08000e14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e1c:	4b12      	ldr	r3, [pc, #72]	; (8000e68 <HAL_InitTick+0x54>)
 8000e1e:	681a      	ldr	r2, [r3, #0]
 8000e20:	4b12      	ldr	r3, [pc, #72]	; (8000e6c <HAL_InitTick+0x58>)
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	4619      	mov	r1, r3
 8000e26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e32:	4618      	mov	r0, r3
 8000e34:	f000 f939 	bl	80010aa <HAL_SYSTICK_Config>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	e00e      	b.n	8000e60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	2b0f      	cmp	r3, #15
 8000e46:	d80a      	bhi.n	8000e5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e48:	2200      	movs	r2, #0
 8000e4a:	6879      	ldr	r1, [r7, #4]
 8000e4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e50:	f000 f90f 	bl	8001072 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e54:	4a06      	ldr	r2, [pc, #24]	; (8000e70 <HAL_InitTick+0x5c>)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	e000      	b.n	8000e60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e5e:	2301      	movs	r3, #1
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	3708      	adds	r7, #8
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	20000000 	.word	0x20000000
 8000e6c:	20000008 	.word	0x20000008
 8000e70:	20000004 	.word	0x20000004

08000e74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e78:	4b06      	ldr	r3, [pc, #24]	; (8000e94 <HAL_IncTick+0x20>)
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	461a      	mov	r2, r3
 8000e7e:	4b06      	ldr	r3, [pc, #24]	; (8000e98 <HAL_IncTick+0x24>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4413      	add	r3, r2
 8000e84:	4a04      	ldr	r2, [pc, #16]	; (8000e98 <HAL_IncTick+0x24>)
 8000e86:	6013      	str	r3, [r2, #0]
}
 8000e88:	bf00      	nop
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	20000008 	.word	0x20000008
 8000e98:	200000c8 	.word	0x200000c8

08000e9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000ea0:	4b03      	ldr	r3, [pc, #12]	; (8000eb0 <HAL_GetTick+0x14>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	200000c8 	.word	0x200000c8

08000eb4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b084      	sub	sp, #16
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ebc:	f7ff ffee 	bl	8000e9c <HAL_GetTick>
 8000ec0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000ecc:	d005      	beq.n	8000eda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ece:	4b09      	ldr	r3, [pc, #36]	; (8000ef4 <HAL_Delay+0x40>)
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	461a      	mov	r2, r3
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	4413      	add	r3, r2
 8000ed8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000eda:	bf00      	nop
 8000edc:	f7ff ffde 	bl	8000e9c <HAL_GetTick>
 8000ee0:	4602      	mov	r2, r0
 8000ee2:	68bb      	ldr	r3, [r7, #8]
 8000ee4:	1ad3      	subs	r3, r2, r3
 8000ee6:	68fa      	ldr	r2, [r7, #12]
 8000ee8:	429a      	cmp	r2, r3
 8000eea:	d8f7      	bhi.n	8000edc <HAL_Delay+0x28>
  {
  }
}
 8000eec:	bf00      	nop
 8000eee:	3710      	adds	r7, #16
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	20000008 	.word	0x20000008

08000ef8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b085      	sub	sp, #20
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	f003 0307 	and.w	r3, r3, #7
 8000f06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f08:	4b0c      	ldr	r3, [pc, #48]	; (8000f3c <__NVIC_SetPriorityGrouping+0x44>)
 8000f0a:	68db      	ldr	r3, [r3, #12]
 8000f0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f0e:	68ba      	ldr	r2, [r7, #8]
 8000f10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f14:	4013      	ands	r3, r2
 8000f16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f1c:	68bb      	ldr	r3, [r7, #8]
 8000f1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f2a:	4a04      	ldr	r2, [pc, #16]	; (8000f3c <__NVIC_SetPriorityGrouping+0x44>)
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	60d3      	str	r3, [r2, #12]
}
 8000f30:	bf00      	nop
 8000f32:	3714      	adds	r7, #20
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr
 8000f3c:	e000ed00 	.word	0xe000ed00

08000f40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f44:	4b04      	ldr	r3, [pc, #16]	; (8000f58 <__NVIC_GetPriorityGrouping+0x18>)
 8000f46:	68db      	ldr	r3, [r3, #12]
 8000f48:	0a1b      	lsrs	r3, r3, #8
 8000f4a:	f003 0307 	and.w	r3, r3, #7
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr
 8000f58:	e000ed00 	.word	0xe000ed00

08000f5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	4603      	mov	r3, r0
 8000f64:	6039      	str	r1, [r7, #0]
 8000f66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	db0a      	blt.n	8000f86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	b2da      	uxtb	r2, r3
 8000f74:	490c      	ldr	r1, [pc, #48]	; (8000fa8 <__NVIC_SetPriority+0x4c>)
 8000f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7a:	0112      	lsls	r2, r2, #4
 8000f7c:	b2d2      	uxtb	r2, r2
 8000f7e:	440b      	add	r3, r1
 8000f80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f84:	e00a      	b.n	8000f9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	b2da      	uxtb	r2, r3
 8000f8a:	4908      	ldr	r1, [pc, #32]	; (8000fac <__NVIC_SetPriority+0x50>)
 8000f8c:	79fb      	ldrb	r3, [r7, #7]
 8000f8e:	f003 030f 	and.w	r3, r3, #15
 8000f92:	3b04      	subs	r3, #4
 8000f94:	0112      	lsls	r2, r2, #4
 8000f96:	b2d2      	uxtb	r2, r2
 8000f98:	440b      	add	r3, r1
 8000f9a:	761a      	strb	r2, [r3, #24]
}
 8000f9c:	bf00      	nop
 8000f9e:	370c      	adds	r7, #12
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr
 8000fa8:	e000e100 	.word	0xe000e100
 8000fac:	e000ed00 	.word	0xe000ed00

08000fb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b089      	sub	sp, #36	; 0x24
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	60f8      	str	r0, [r7, #12]
 8000fb8:	60b9      	str	r1, [r7, #8]
 8000fba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	f003 0307 	and.w	r3, r3, #7
 8000fc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fc4:	69fb      	ldr	r3, [r7, #28]
 8000fc6:	f1c3 0307 	rsb	r3, r3, #7
 8000fca:	2b04      	cmp	r3, #4
 8000fcc:	bf28      	it	cs
 8000fce:	2304      	movcs	r3, #4
 8000fd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	3304      	adds	r3, #4
 8000fd6:	2b06      	cmp	r3, #6
 8000fd8:	d902      	bls.n	8000fe0 <NVIC_EncodePriority+0x30>
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	3b03      	subs	r3, #3
 8000fde:	e000      	b.n	8000fe2 <NVIC_EncodePriority+0x32>
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fe4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000fe8:	69bb      	ldr	r3, [r7, #24]
 8000fea:	fa02 f303 	lsl.w	r3, r2, r3
 8000fee:	43da      	mvns	r2, r3
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	401a      	ands	r2, r3
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ff8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	fa01 f303 	lsl.w	r3, r1, r3
 8001002:	43d9      	mvns	r1, r3
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001008:	4313      	orrs	r3, r2
         );
}
 800100a:	4618      	mov	r0, r3
 800100c:	3724      	adds	r7, #36	; 0x24
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
	...

08001018 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	3b01      	subs	r3, #1
 8001024:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001028:	d301      	bcc.n	800102e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800102a:	2301      	movs	r3, #1
 800102c:	e00f      	b.n	800104e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800102e:	4a0a      	ldr	r2, [pc, #40]	; (8001058 <SysTick_Config+0x40>)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	3b01      	subs	r3, #1
 8001034:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001036:	210f      	movs	r1, #15
 8001038:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800103c:	f7ff ff8e 	bl	8000f5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001040:	4b05      	ldr	r3, [pc, #20]	; (8001058 <SysTick_Config+0x40>)
 8001042:	2200      	movs	r2, #0
 8001044:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001046:	4b04      	ldr	r3, [pc, #16]	; (8001058 <SysTick_Config+0x40>)
 8001048:	2207      	movs	r2, #7
 800104a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800104c:	2300      	movs	r3, #0
}
 800104e:	4618      	mov	r0, r3
 8001050:	3708      	adds	r7, #8
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	e000e010 	.word	0xe000e010

0800105c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001064:	6878      	ldr	r0, [r7, #4]
 8001066:	f7ff ff47 	bl	8000ef8 <__NVIC_SetPriorityGrouping>
}
 800106a:	bf00      	nop
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}

08001072 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001072:	b580      	push	{r7, lr}
 8001074:	b086      	sub	sp, #24
 8001076:	af00      	add	r7, sp, #0
 8001078:	4603      	mov	r3, r0
 800107a:	60b9      	str	r1, [r7, #8]
 800107c:	607a      	str	r2, [r7, #4]
 800107e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001080:	2300      	movs	r3, #0
 8001082:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001084:	f7ff ff5c 	bl	8000f40 <__NVIC_GetPriorityGrouping>
 8001088:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800108a:	687a      	ldr	r2, [r7, #4]
 800108c:	68b9      	ldr	r1, [r7, #8]
 800108e:	6978      	ldr	r0, [r7, #20]
 8001090:	f7ff ff8e 	bl	8000fb0 <NVIC_EncodePriority>
 8001094:	4602      	mov	r2, r0
 8001096:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800109a:	4611      	mov	r1, r2
 800109c:	4618      	mov	r0, r3
 800109e:	f7ff ff5d 	bl	8000f5c <__NVIC_SetPriority>
}
 80010a2:	bf00      	nop
 80010a4:	3718      	adds	r7, #24
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}

080010aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010aa:	b580      	push	{r7, lr}
 80010ac:	b082      	sub	sp, #8
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010b2:	6878      	ldr	r0, [r7, #4]
 80010b4:	f7ff ffb0 	bl	8001018 <SysTick_Config>
 80010b8:	4603      	mov	r3, r0
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3708      	adds	r7, #8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
	...

080010c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b089      	sub	sp, #36	; 0x24
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010ce:	2300      	movs	r3, #0
 80010d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010d2:	2300      	movs	r3, #0
 80010d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010d6:	2300      	movs	r3, #0
 80010d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010da:	2300      	movs	r3, #0
 80010dc:	61fb      	str	r3, [r7, #28]
 80010de:	e159      	b.n	8001394 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010e0:	2201      	movs	r2, #1
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	fa02 f303 	lsl.w	r3, r2, r3
 80010e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	697a      	ldr	r2, [r7, #20]
 80010f0:	4013      	ands	r3, r2
 80010f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010f4:	693a      	ldr	r2, [r7, #16]
 80010f6:	697b      	ldr	r3, [r7, #20]
 80010f8:	429a      	cmp	r2, r3
 80010fa:	f040 8148 	bne.w	800138e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	2b01      	cmp	r3, #1
 8001104:	d00b      	beq.n	800111e <HAL_GPIO_Init+0x5a>
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	2b02      	cmp	r3, #2
 800110c:	d007      	beq.n	800111e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001112:	2b11      	cmp	r3, #17
 8001114:	d003      	beq.n	800111e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	2b12      	cmp	r3, #18
 800111c:	d130      	bne.n	8001180 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	689b      	ldr	r3, [r3, #8]
 8001122:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001124:	69fb      	ldr	r3, [r7, #28]
 8001126:	005b      	lsls	r3, r3, #1
 8001128:	2203      	movs	r2, #3
 800112a:	fa02 f303 	lsl.w	r3, r2, r3
 800112e:	43db      	mvns	r3, r3
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	4013      	ands	r3, r2
 8001134:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	68da      	ldr	r2, [r3, #12]
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	005b      	lsls	r3, r3, #1
 800113e:	fa02 f303 	lsl.w	r3, r2, r3
 8001142:	69ba      	ldr	r2, [r7, #24]
 8001144:	4313      	orrs	r3, r2
 8001146:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	69ba      	ldr	r2, [r7, #24]
 800114c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001154:	2201      	movs	r2, #1
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	fa02 f303 	lsl.w	r3, r2, r3
 800115c:	43db      	mvns	r3, r3
 800115e:	69ba      	ldr	r2, [r7, #24]
 8001160:	4013      	ands	r3, r2
 8001162:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	091b      	lsrs	r3, r3, #4
 800116a:	f003 0201 	and.w	r2, r3, #1
 800116e:	69fb      	ldr	r3, [r7, #28]
 8001170:	fa02 f303 	lsl.w	r3, r2, r3
 8001174:	69ba      	ldr	r2, [r7, #24]
 8001176:	4313      	orrs	r3, r2
 8001178:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	69ba      	ldr	r2, [r7, #24]
 800117e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	68db      	ldr	r3, [r3, #12]
 8001184:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	005b      	lsls	r3, r3, #1
 800118a:	2203      	movs	r2, #3
 800118c:	fa02 f303 	lsl.w	r3, r2, r3
 8001190:	43db      	mvns	r3, r3
 8001192:	69ba      	ldr	r2, [r7, #24]
 8001194:	4013      	ands	r3, r2
 8001196:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	689a      	ldr	r2, [r3, #8]
 800119c:	69fb      	ldr	r3, [r7, #28]
 800119e:	005b      	lsls	r3, r3, #1
 80011a0:	fa02 f303 	lsl.w	r3, r2, r3
 80011a4:	69ba      	ldr	r2, [r7, #24]
 80011a6:	4313      	orrs	r3, r2
 80011a8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	69ba      	ldr	r2, [r7, #24]
 80011ae:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	2b02      	cmp	r3, #2
 80011b6:	d003      	beq.n	80011c0 <HAL_GPIO_Init+0xfc>
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	2b12      	cmp	r3, #18
 80011be:	d123      	bne.n	8001208 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011c0:	69fb      	ldr	r3, [r7, #28]
 80011c2:	08da      	lsrs	r2, r3, #3
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	3208      	adds	r2, #8
 80011c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011ce:	69fb      	ldr	r3, [r7, #28]
 80011d0:	f003 0307 	and.w	r3, r3, #7
 80011d4:	009b      	lsls	r3, r3, #2
 80011d6:	220f      	movs	r2, #15
 80011d8:	fa02 f303 	lsl.w	r3, r2, r3
 80011dc:	43db      	mvns	r3, r3
 80011de:	69ba      	ldr	r2, [r7, #24]
 80011e0:	4013      	ands	r3, r2
 80011e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	691a      	ldr	r2, [r3, #16]
 80011e8:	69fb      	ldr	r3, [r7, #28]
 80011ea:	f003 0307 	and.w	r3, r3, #7
 80011ee:	009b      	lsls	r3, r3, #2
 80011f0:	fa02 f303 	lsl.w	r3, r2, r3
 80011f4:	69ba      	ldr	r2, [r7, #24]
 80011f6:	4313      	orrs	r3, r2
 80011f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	08da      	lsrs	r2, r3, #3
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	3208      	adds	r2, #8
 8001202:	69b9      	ldr	r1, [r7, #24]
 8001204:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	005b      	lsls	r3, r3, #1
 8001212:	2203      	movs	r2, #3
 8001214:	fa02 f303 	lsl.w	r3, r2, r3
 8001218:	43db      	mvns	r3, r3
 800121a:	69ba      	ldr	r2, [r7, #24]
 800121c:	4013      	ands	r3, r2
 800121e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	f003 0203 	and.w	r2, r3, #3
 8001228:	69fb      	ldr	r3, [r7, #28]
 800122a:	005b      	lsls	r3, r3, #1
 800122c:	fa02 f303 	lsl.w	r3, r2, r3
 8001230:	69ba      	ldr	r2, [r7, #24]
 8001232:	4313      	orrs	r3, r2
 8001234:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	69ba      	ldr	r2, [r7, #24]
 800123a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001244:	2b00      	cmp	r3, #0
 8001246:	f000 80a2 	beq.w	800138e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800124a:	2300      	movs	r3, #0
 800124c:	60fb      	str	r3, [r7, #12]
 800124e:	4b56      	ldr	r3, [pc, #344]	; (80013a8 <HAL_GPIO_Init+0x2e4>)
 8001250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001252:	4a55      	ldr	r2, [pc, #340]	; (80013a8 <HAL_GPIO_Init+0x2e4>)
 8001254:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001258:	6453      	str	r3, [r2, #68]	; 0x44
 800125a:	4b53      	ldr	r3, [pc, #332]	; (80013a8 <HAL_GPIO_Init+0x2e4>)
 800125c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800125e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001262:	60fb      	str	r3, [r7, #12]
 8001264:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001266:	4a51      	ldr	r2, [pc, #324]	; (80013ac <HAL_GPIO_Init+0x2e8>)
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	089b      	lsrs	r3, r3, #2
 800126c:	3302      	adds	r3, #2
 800126e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001272:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001274:	69fb      	ldr	r3, [r7, #28]
 8001276:	f003 0303 	and.w	r3, r3, #3
 800127a:	009b      	lsls	r3, r3, #2
 800127c:	220f      	movs	r2, #15
 800127e:	fa02 f303 	lsl.w	r3, r2, r3
 8001282:	43db      	mvns	r3, r3
 8001284:	69ba      	ldr	r2, [r7, #24]
 8001286:	4013      	ands	r3, r2
 8001288:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4a48      	ldr	r2, [pc, #288]	; (80013b0 <HAL_GPIO_Init+0x2ec>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d019      	beq.n	80012c6 <HAL_GPIO_Init+0x202>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	4a47      	ldr	r2, [pc, #284]	; (80013b4 <HAL_GPIO_Init+0x2f0>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d013      	beq.n	80012c2 <HAL_GPIO_Init+0x1fe>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4a46      	ldr	r2, [pc, #280]	; (80013b8 <HAL_GPIO_Init+0x2f4>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d00d      	beq.n	80012be <HAL_GPIO_Init+0x1fa>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4a45      	ldr	r2, [pc, #276]	; (80013bc <HAL_GPIO_Init+0x2f8>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d007      	beq.n	80012ba <HAL_GPIO_Init+0x1f6>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4a44      	ldr	r2, [pc, #272]	; (80013c0 <HAL_GPIO_Init+0x2fc>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d101      	bne.n	80012b6 <HAL_GPIO_Init+0x1f2>
 80012b2:	2304      	movs	r3, #4
 80012b4:	e008      	b.n	80012c8 <HAL_GPIO_Init+0x204>
 80012b6:	2307      	movs	r3, #7
 80012b8:	e006      	b.n	80012c8 <HAL_GPIO_Init+0x204>
 80012ba:	2303      	movs	r3, #3
 80012bc:	e004      	b.n	80012c8 <HAL_GPIO_Init+0x204>
 80012be:	2302      	movs	r3, #2
 80012c0:	e002      	b.n	80012c8 <HAL_GPIO_Init+0x204>
 80012c2:	2301      	movs	r3, #1
 80012c4:	e000      	b.n	80012c8 <HAL_GPIO_Init+0x204>
 80012c6:	2300      	movs	r3, #0
 80012c8:	69fa      	ldr	r2, [r7, #28]
 80012ca:	f002 0203 	and.w	r2, r2, #3
 80012ce:	0092      	lsls	r2, r2, #2
 80012d0:	4093      	lsls	r3, r2
 80012d2:	69ba      	ldr	r2, [r7, #24]
 80012d4:	4313      	orrs	r3, r2
 80012d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012d8:	4934      	ldr	r1, [pc, #208]	; (80013ac <HAL_GPIO_Init+0x2e8>)
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	089b      	lsrs	r3, r3, #2
 80012de:	3302      	adds	r3, #2
 80012e0:	69ba      	ldr	r2, [r7, #24]
 80012e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012e6:	4b37      	ldr	r3, [pc, #220]	; (80013c4 <HAL_GPIO_Init+0x300>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012ec:	693b      	ldr	r3, [r7, #16]
 80012ee:	43db      	mvns	r3, r3
 80012f0:	69ba      	ldr	r2, [r7, #24]
 80012f2:	4013      	ands	r3, r2
 80012f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d003      	beq.n	800130a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001302:	69ba      	ldr	r2, [r7, #24]
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	4313      	orrs	r3, r2
 8001308:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800130a:	4a2e      	ldr	r2, [pc, #184]	; (80013c4 <HAL_GPIO_Init+0x300>)
 800130c:	69bb      	ldr	r3, [r7, #24]
 800130e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001310:	4b2c      	ldr	r3, [pc, #176]	; (80013c4 <HAL_GPIO_Init+0x300>)
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	43db      	mvns	r3, r3
 800131a:	69ba      	ldr	r2, [r7, #24]
 800131c:	4013      	ands	r3, r2
 800131e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001328:	2b00      	cmp	r3, #0
 800132a:	d003      	beq.n	8001334 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800132c:	69ba      	ldr	r2, [r7, #24]
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	4313      	orrs	r3, r2
 8001332:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001334:	4a23      	ldr	r2, [pc, #140]	; (80013c4 <HAL_GPIO_Init+0x300>)
 8001336:	69bb      	ldr	r3, [r7, #24]
 8001338:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800133a:	4b22      	ldr	r3, [pc, #136]	; (80013c4 <HAL_GPIO_Init+0x300>)
 800133c:	689b      	ldr	r3, [r3, #8]
 800133e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001340:	693b      	ldr	r3, [r7, #16]
 8001342:	43db      	mvns	r3, r3
 8001344:	69ba      	ldr	r2, [r7, #24]
 8001346:	4013      	ands	r3, r2
 8001348:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001352:	2b00      	cmp	r3, #0
 8001354:	d003      	beq.n	800135e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001356:	69ba      	ldr	r2, [r7, #24]
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	4313      	orrs	r3, r2
 800135c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800135e:	4a19      	ldr	r2, [pc, #100]	; (80013c4 <HAL_GPIO_Init+0x300>)
 8001360:	69bb      	ldr	r3, [r7, #24]
 8001362:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001364:	4b17      	ldr	r3, [pc, #92]	; (80013c4 <HAL_GPIO_Init+0x300>)
 8001366:	68db      	ldr	r3, [r3, #12]
 8001368:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	43db      	mvns	r3, r3
 800136e:	69ba      	ldr	r2, [r7, #24]
 8001370:	4013      	ands	r3, r2
 8001372:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800137c:	2b00      	cmp	r3, #0
 800137e:	d003      	beq.n	8001388 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001380:	69ba      	ldr	r2, [r7, #24]
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	4313      	orrs	r3, r2
 8001386:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001388:	4a0e      	ldr	r2, [pc, #56]	; (80013c4 <HAL_GPIO_Init+0x300>)
 800138a:	69bb      	ldr	r3, [r7, #24]
 800138c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	3301      	adds	r3, #1
 8001392:	61fb      	str	r3, [r7, #28]
 8001394:	69fb      	ldr	r3, [r7, #28]
 8001396:	2b0f      	cmp	r3, #15
 8001398:	f67f aea2 	bls.w	80010e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800139c:	bf00      	nop
 800139e:	3724      	adds	r7, #36	; 0x24
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr
 80013a8:	40023800 	.word	0x40023800
 80013ac:	40013800 	.word	0x40013800
 80013b0:	40020000 	.word	0x40020000
 80013b4:	40020400 	.word	0x40020400
 80013b8:	40020800 	.word	0x40020800
 80013bc:	40020c00 	.word	0x40020c00
 80013c0:	40021000 	.word	0x40021000
 80013c4:	40013c00 	.word	0x40013c00

080013c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
 80013d0:	460b      	mov	r3, r1
 80013d2:	807b      	strh	r3, [r7, #2]
 80013d4:	4613      	mov	r3, r2
 80013d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013d8:	787b      	ldrb	r3, [r7, #1]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d003      	beq.n	80013e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013de:	887a      	ldrh	r2, [r7, #2]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013e4:	e003      	b.n	80013ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013e6:	887b      	ldrh	r3, [r7, #2]
 80013e8:	041a      	lsls	r2, r3, #16
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	619a      	str	r2, [r3, #24]
}
 80013ee:	bf00      	nop
 80013f0:	370c      	adds	r7, #12
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr

080013fa <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013fa:	b480      	push	{r7}
 80013fc:	b083      	sub	sp, #12
 80013fe:	af00      	add	r7, sp, #0
 8001400:	6078      	str	r0, [r7, #4]
 8001402:	460b      	mov	r3, r1
 8001404:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	695a      	ldr	r2, [r3, #20]
 800140a:	887b      	ldrh	r3, [r7, #2]
 800140c:	401a      	ands	r2, r3
 800140e:	887b      	ldrh	r3, [r7, #2]
 8001410:	429a      	cmp	r2, r3
 8001412:	d104      	bne.n	800141e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001414:	887b      	ldrh	r3, [r7, #2]
 8001416:	041a      	lsls	r2, r3, #16
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 800141c:	e002      	b.n	8001424 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800141e:	887a      	ldrh	r2, [r7, #2]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	619a      	str	r2, [r3, #24]
}
 8001424:	bf00      	nop
 8001426:	370c      	adds	r7, #12
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr

08001430 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b086      	sub	sp, #24
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d101      	bne.n	8001442 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800143e:	2301      	movs	r3, #1
 8001440:	e25b      	b.n	80018fa <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f003 0301 	and.w	r3, r3, #1
 800144a:	2b00      	cmp	r3, #0
 800144c:	d075      	beq.n	800153a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800144e:	4ba3      	ldr	r3, [pc, #652]	; (80016dc <HAL_RCC_OscConfig+0x2ac>)
 8001450:	689b      	ldr	r3, [r3, #8]
 8001452:	f003 030c 	and.w	r3, r3, #12
 8001456:	2b04      	cmp	r3, #4
 8001458:	d00c      	beq.n	8001474 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800145a:	4ba0      	ldr	r3, [pc, #640]	; (80016dc <HAL_RCC_OscConfig+0x2ac>)
 800145c:	689b      	ldr	r3, [r3, #8]
 800145e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001462:	2b08      	cmp	r3, #8
 8001464:	d112      	bne.n	800148c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001466:	4b9d      	ldr	r3, [pc, #628]	; (80016dc <HAL_RCC_OscConfig+0x2ac>)
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800146e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001472:	d10b      	bne.n	800148c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001474:	4b99      	ldr	r3, [pc, #612]	; (80016dc <HAL_RCC_OscConfig+0x2ac>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800147c:	2b00      	cmp	r3, #0
 800147e:	d05b      	beq.n	8001538 <HAL_RCC_OscConfig+0x108>
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d157      	bne.n	8001538 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001488:	2301      	movs	r3, #1
 800148a:	e236      	b.n	80018fa <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001494:	d106      	bne.n	80014a4 <HAL_RCC_OscConfig+0x74>
 8001496:	4b91      	ldr	r3, [pc, #580]	; (80016dc <HAL_RCC_OscConfig+0x2ac>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4a90      	ldr	r2, [pc, #576]	; (80016dc <HAL_RCC_OscConfig+0x2ac>)
 800149c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014a0:	6013      	str	r3, [r2, #0]
 80014a2:	e01d      	b.n	80014e0 <HAL_RCC_OscConfig+0xb0>
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014ac:	d10c      	bne.n	80014c8 <HAL_RCC_OscConfig+0x98>
 80014ae:	4b8b      	ldr	r3, [pc, #556]	; (80016dc <HAL_RCC_OscConfig+0x2ac>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a8a      	ldr	r2, [pc, #552]	; (80016dc <HAL_RCC_OscConfig+0x2ac>)
 80014b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014b8:	6013      	str	r3, [r2, #0]
 80014ba:	4b88      	ldr	r3, [pc, #544]	; (80016dc <HAL_RCC_OscConfig+0x2ac>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4a87      	ldr	r2, [pc, #540]	; (80016dc <HAL_RCC_OscConfig+0x2ac>)
 80014c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014c4:	6013      	str	r3, [r2, #0]
 80014c6:	e00b      	b.n	80014e0 <HAL_RCC_OscConfig+0xb0>
 80014c8:	4b84      	ldr	r3, [pc, #528]	; (80016dc <HAL_RCC_OscConfig+0x2ac>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a83      	ldr	r2, [pc, #524]	; (80016dc <HAL_RCC_OscConfig+0x2ac>)
 80014ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014d2:	6013      	str	r3, [r2, #0]
 80014d4:	4b81      	ldr	r3, [pc, #516]	; (80016dc <HAL_RCC_OscConfig+0x2ac>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a80      	ldr	r2, [pc, #512]	; (80016dc <HAL_RCC_OscConfig+0x2ac>)
 80014da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d013      	beq.n	8001510 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014e8:	f7ff fcd8 	bl	8000e9c <HAL_GetTick>
 80014ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014ee:	e008      	b.n	8001502 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014f0:	f7ff fcd4 	bl	8000e9c <HAL_GetTick>
 80014f4:	4602      	mov	r2, r0
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	1ad3      	subs	r3, r2, r3
 80014fa:	2b64      	cmp	r3, #100	; 0x64
 80014fc:	d901      	bls.n	8001502 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80014fe:	2303      	movs	r3, #3
 8001500:	e1fb      	b.n	80018fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001502:	4b76      	ldr	r3, [pc, #472]	; (80016dc <HAL_RCC_OscConfig+0x2ac>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800150a:	2b00      	cmp	r3, #0
 800150c:	d0f0      	beq.n	80014f0 <HAL_RCC_OscConfig+0xc0>
 800150e:	e014      	b.n	800153a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001510:	f7ff fcc4 	bl	8000e9c <HAL_GetTick>
 8001514:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001516:	e008      	b.n	800152a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001518:	f7ff fcc0 	bl	8000e9c <HAL_GetTick>
 800151c:	4602      	mov	r2, r0
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	2b64      	cmp	r3, #100	; 0x64
 8001524:	d901      	bls.n	800152a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001526:	2303      	movs	r3, #3
 8001528:	e1e7      	b.n	80018fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800152a:	4b6c      	ldr	r3, [pc, #432]	; (80016dc <HAL_RCC_OscConfig+0x2ac>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001532:	2b00      	cmp	r3, #0
 8001534:	d1f0      	bne.n	8001518 <HAL_RCC_OscConfig+0xe8>
 8001536:	e000      	b.n	800153a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001538:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f003 0302 	and.w	r3, r3, #2
 8001542:	2b00      	cmp	r3, #0
 8001544:	d063      	beq.n	800160e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001546:	4b65      	ldr	r3, [pc, #404]	; (80016dc <HAL_RCC_OscConfig+0x2ac>)
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	f003 030c 	and.w	r3, r3, #12
 800154e:	2b00      	cmp	r3, #0
 8001550:	d00b      	beq.n	800156a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001552:	4b62      	ldr	r3, [pc, #392]	; (80016dc <HAL_RCC_OscConfig+0x2ac>)
 8001554:	689b      	ldr	r3, [r3, #8]
 8001556:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800155a:	2b08      	cmp	r3, #8
 800155c:	d11c      	bne.n	8001598 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800155e:	4b5f      	ldr	r3, [pc, #380]	; (80016dc <HAL_RCC_OscConfig+0x2ac>)
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001566:	2b00      	cmp	r3, #0
 8001568:	d116      	bne.n	8001598 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800156a:	4b5c      	ldr	r3, [pc, #368]	; (80016dc <HAL_RCC_OscConfig+0x2ac>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f003 0302 	and.w	r3, r3, #2
 8001572:	2b00      	cmp	r3, #0
 8001574:	d005      	beq.n	8001582 <HAL_RCC_OscConfig+0x152>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	68db      	ldr	r3, [r3, #12]
 800157a:	2b01      	cmp	r3, #1
 800157c:	d001      	beq.n	8001582 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800157e:	2301      	movs	r3, #1
 8001580:	e1bb      	b.n	80018fa <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001582:	4b56      	ldr	r3, [pc, #344]	; (80016dc <HAL_RCC_OscConfig+0x2ac>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	691b      	ldr	r3, [r3, #16]
 800158e:	00db      	lsls	r3, r3, #3
 8001590:	4952      	ldr	r1, [pc, #328]	; (80016dc <HAL_RCC_OscConfig+0x2ac>)
 8001592:	4313      	orrs	r3, r2
 8001594:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001596:	e03a      	b.n	800160e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	68db      	ldr	r3, [r3, #12]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d020      	beq.n	80015e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015a0:	4b4f      	ldr	r3, [pc, #316]	; (80016e0 <HAL_RCC_OscConfig+0x2b0>)
 80015a2:	2201      	movs	r2, #1
 80015a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015a6:	f7ff fc79 	bl	8000e9c <HAL_GetTick>
 80015aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015ac:	e008      	b.n	80015c0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015ae:	f7ff fc75 	bl	8000e9c <HAL_GetTick>
 80015b2:	4602      	mov	r2, r0
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	1ad3      	subs	r3, r2, r3
 80015b8:	2b02      	cmp	r3, #2
 80015ba:	d901      	bls.n	80015c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80015bc:	2303      	movs	r3, #3
 80015be:	e19c      	b.n	80018fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015c0:	4b46      	ldr	r3, [pc, #280]	; (80016dc <HAL_RCC_OscConfig+0x2ac>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f003 0302 	and.w	r3, r3, #2
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d0f0      	beq.n	80015ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015cc:	4b43      	ldr	r3, [pc, #268]	; (80016dc <HAL_RCC_OscConfig+0x2ac>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	691b      	ldr	r3, [r3, #16]
 80015d8:	00db      	lsls	r3, r3, #3
 80015da:	4940      	ldr	r1, [pc, #256]	; (80016dc <HAL_RCC_OscConfig+0x2ac>)
 80015dc:	4313      	orrs	r3, r2
 80015de:	600b      	str	r3, [r1, #0]
 80015e0:	e015      	b.n	800160e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015e2:	4b3f      	ldr	r3, [pc, #252]	; (80016e0 <HAL_RCC_OscConfig+0x2b0>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015e8:	f7ff fc58 	bl	8000e9c <HAL_GetTick>
 80015ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015ee:	e008      	b.n	8001602 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015f0:	f7ff fc54 	bl	8000e9c <HAL_GetTick>
 80015f4:	4602      	mov	r2, r0
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	2b02      	cmp	r3, #2
 80015fc:	d901      	bls.n	8001602 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80015fe:	2303      	movs	r3, #3
 8001600:	e17b      	b.n	80018fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001602:	4b36      	ldr	r3, [pc, #216]	; (80016dc <HAL_RCC_OscConfig+0x2ac>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 0302 	and.w	r3, r3, #2
 800160a:	2b00      	cmp	r3, #0
 800160c:	d1f0      	bne.n	80015f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f003 0308 	and.w	r3, r3, #8
 8001616:	2b00      	cmp	r3, #0
 8001618:	d030      	beq.n	800167c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	695b      	ldr	r3, [r3, #20]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d016      	beq.n	8001650 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001622:	4b30      	ldr	r3, [pc, #192]	; (80016e4 <HAL_RCC_OscConfig+0x2b4>)
 8001624:	2201      	movs	r2, #1
 8001626:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001628:	f7ff fc38 	bl	8000e9c <HAL_GetTick>
 800162c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800162e:	e008      	b.n	8001642 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001630:	f7ff fc34 	bl	8000e9c <HAL_GetTick>
 8001634:	4602      	mov	r2, r0
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	2b02      	cmp	r3, #2
 800163c:	d901      	bls.n	8001642 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800163e:	2303      	movs	r3, #3
 8001640:	e15b      	b.n	80018fa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001642:	4b26      	ldr	r3, [pc, #152]	; (80016dc <HAL_RCC_OscConfig+0x2ac>)
 8001644:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001646:	f003 0302 	and.w	r3, r3, #2
 800164a:	2b00      	cmp	r3, #0
 800164c:	d0f0      	beq.n	8001630 <HAL_RCC_OscConfig+0x200>
 800164e:	e015      	b.n	800167c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001650:	4b24      	ldr	r3, [pc, #144]	; (80016e4 <HAL_RCC_OscConfig+0x2b4>)
 8001652:	2200      	movs	r2, #0
 8001654:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001656:	f7ff fc21 	bl	8000e9c <HAL_GetTick>
 800165a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800165c:	e008      	b.n	8001670 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800165e:	f7ff fc1d 	bl	8000e9c <HAL_GetTick>
 8001662:	4602      	mov	r2, r0
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	1ad3      	subs	r3, r2, r3
 8001668:	2b02      	cmp	r3, #2
 800166a:	d901      	bls.n	8001670 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800166c:	2303      	movs	r3, #3
 800166e:	e144      	b.n	80018fa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001670:	4b1a      	ldr	r3, [pc, #104]	; (80016dc <HAL_RCC_OscConfig+0x2ac>)
 8001672:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001674:	f003 0302 	and.w	r3, r3, #2
 8001678:	2b00      	cmp	r3, #0
 800167a:	d1f0      	bne.n	800165e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f003 0304 	and.w	r3, r3, #4
 8001684:	2b00      	cmp	r3, #0
 8001686:	f000 80a0 	beq.w	80017ca <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800168a:	2300      	movs	r3, #0
 800168c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800168e:	4b13      	ldr	r3, [pc, #76]	; (80016dc <HAL_RCC_OscConfig+0x2ac>)
 8001690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001692:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001696:	2b00      	cmp	r3, #0
 8001698:	d10f      	bne.n	80016ba <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800169a:	2300      	movs	r3, #0
 800169c:	60bb      	str	r3, [r7, #8]
 800169e:	4b0f      	ldr	r3, [pc, #60]	; (80016dc <HAL_RCC_OscConfig+0x2ac>)
 80016a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a2:	4a0e      	ldr	r2, [pc, #56]	; (80016dc <HAL_RCC_OscConfig+0x2ac>)
 80016a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016a8:	6413      	str	r3, [r2, #64]	; 0x40
 80016aa:	4b0c      	ldr	r3, [pc, #48]	; (80016dc <HAL_RCC_OscConfig+0x2ac>)
 80016ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016b2:	60bb      	str	r3, [r7, #8]
 80016b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016b6:	2301      	movs	r3, #1
 80016b8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016ba:	4b0b      	ldr	r3, [pc, #44]	; (80016e8 <HAL_RCC_OscConfig+0x2b8>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d121      	bne.n	800170a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016c6:	4b08      	ldr	r3, [pc, #32]	; (80016e8 <HAL_RCC_OscConfig+0x2b8>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a07      	ldr	r2, [pc, #28]	; (80016e8 <HAL_RCC_OscConfig+0x2b8>)
 80016cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016d2:	f7ff fbe3 	bl	8000e9c <HAL_GetTick>
 80016d6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016d8:	e011      	b.n	80016fe <HAL_RCC_OscConfig+0x2ce>
 80016da:	bf00      	nop
 80016dc:	40023800 	.word	0x40023800
 80016e0:	42470000 	.word	0x42470000
 80016e4:	42470e80 	.word	0x42470e80
 80016e8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016ec:	f7ff fbd6 	bl	8000e9c <HAL_GetTick>
 80016f0:	4602      	mov	r2, r0
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	2b02      	cmp	r3, #2
 80016f8:	d901      	bls.n	80016fe <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80016fa:	2303      	movs	r3, #3
 80016fc:	e0fd      	b.n	80018fa <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016fe:	4b81      	ldr	r3, [pc, #516]	; (8001904 <HAL_RCC_OscConfig+0x4d4>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001706:	2b00      	cmp	r3, #0
 8001708:	d0f0      	beq.n	80016ec <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	2b01      	cmp	r3, #1
 8001710:	d106      	bne.n	8001720 <HAL_RCC_OscConfig+0x2f0>
 8001712:	4b7d      	ldr	r3, [pc, #500]	; (8001908 <HAL_RCC_OscConfig+0x4d8>)
 8001714:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001716:	4a7c      	ldr	r2, [pc, #496]	; (8001908 <HAL_RCC_OscConfig+0x4d8>)
 8001718:	f043 0301 	orr.w	r3, r3, #1
 800171c:	6713      	str	r3, [r2, #112]	; 0x70
 800171e:	e01c      	b.n	800175a <HAL_RCC_OscConfig+0x32a>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	2b05      	cmp	r3, #5
 8001726:	d10c      	bne.n	8001742 <HAL_RCC_OscConfig+0x312>
 8001728:	4b77      	ldr	r3, [pc, #476]	; (8001908 <HAL_RCC_OscConfig+0x4d8>)
 800172a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800172c:	4a76      	ldr	r2, [pc, #472]	; (8001908 <HAL_RCC_OscConfig+0x4d8>)
 800172e:	f043 0304 	orr.w	r3, r3, #4
 8001732:	6713      	str	r3, [r2, #112]	; 0x70
 8001734:	4b74      	ldr	r3, [pc, #464]	; (8001908 <HAL_RCC_OscConfig+0x4d8>)
 8001736:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001738:	4a73      	ldr	r2, [pc, #460]	; (8001908 <HAL_RCC_OscConfig+0x4d8>)
 800173a:	f043 0301 	orr.w	r3, r3, #1
 800173e:	6713      	str	r3, [r2, #112]	; 0x70
 8001740:	e00b      	b.n	800175a <HAL_RCC_OscConfig+0x32a>
 8001742:	4b71      	ldr	r3, [pc, #452]	; (8001908 <HAL_RCC_OscConfig+0x4d8>)
 8001744:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001746:	4a70      	ldr	r2, [pc, #448]	; (8001908 <HAL_RCC_OscConfig+0x4d8>)
 8001748:	f023 0301 	bic.w	r3, r3, #1
 800174c:	6713      	str	r3, [r2, #112]	; 0x70
 800174e:	4b6e      	ldr	r3, [pc, #440]	; (8001908 <HAL_RCC_OscConfig+0x4d8>)
 8001750:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001752:	4a6d      	ldr	r2, [pc, #436]	; (8001908 <HAL_RCC_OscConfig+0x4d8>)
 8001754:	f023 0304 	bic.w	r3, r3, #4
 8001758:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d015      	beq.n	800178e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001762:	f7ff fb9b 	bl	8000e9c <HAL_GetTick>
 8001766:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001768:	e00a      	b.n	8001780 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800176a:	f7ff fb97 	bl	8000e9c <HAL_GetTick>
 800176e:	4602      	mov	r2, r0
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	1ad3      	subs	r3, r2, r3
 8001774:	f241 3288 	movw	r2, #5000	; 0x1388
 8001778:	4293      	cmp	r3, r2
 800177a:	d901      	bls.n	8001780 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800177c:	2303      	movs	r3, #3
 800177e:	e0bc      	b.n	80018fa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001780:	4b61      	ldr	r3, [pc, #388]	; (8001908 <HAL_RCC_OscConfig+0x4d8>)
 8001782:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001784:	f003 0302 	and.w	r3, r3, #2
 8001788:	2b00      	cmp	r3, #0
 800178a:	d0ee      	beq.n	800176a <HAL_RCC_OscConfig+0x33a>
 800178c:	e014      	b.n	80017b8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800178e:	f7ff fb85 	bl	8000e9c <HAL_GetTick>
 8001792:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001794:	e00a      	b.n	80017ac <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001796:	f7ff fb81 	bl	8000e9c <HAL_GetTick>
 800179a:	4602      	mov	r2, r0
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	1ad3      	subs	r3, r2, r3
 80017a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d901      	bls.n	80017ac <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80017a8:	2303      	movs	r3, #3
 80017aa:	e0a6      	b.n	80018fa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017ac:	4b56      	ldr	r3, [pc, #344]	; (8001908 <HAL_RCC_OscConfig+0x4d8>)
 80017ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017b0:	f003 0302 	and.w	r3, r3, #2
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d1ee      	bne.n	8001796 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80017b8:	7dfb      	ldrb	r3, [r7, #23]
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	d105      	bne.n	80017ca <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017be:	4b52      	ldr	r3, [pc, #328]	; (8001908 <HAL_RCC_OscConfig+0x4d8>)
 80017c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c2:	4a51      	ldr	r2, [pc, #324]	; (8001908 <HAL_RCC_OscConfig+0x4d8>)
 80017c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017c8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	699b      	ldr	r3, [r3, #24]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	f000 8092 	beq.w	80018f8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80017d4:	4b4c      	ldr	r3, [pc, #304]	; (8001908 <HAL_RCC_OscConfig+0x4d8>)
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	f003 030c 	and.w	r3, r3, #12
 80017dc:	2b08      	cmp	r3, #8
 80017de:	d05c      	beq.n	800189a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	699b      	ldr	r3, [r3, #24]
 80017e4:	2b02      	cmp	r3, #2
 80017e6:	d141      	bne.n	800186c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017e8:	4b48      	ldr	r3, [pc, #288]	; (800190c <HAL_RCC_OscConfig+0x4dc>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ee:	f7ff fb55 	bl	8000e9c <HAL_GetTick>
 80017f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017f4:	e008      	b.n	8001808 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017f6:	f7ff fb51 	bl	8000e9c <HAL_GetTick>
 80017fa:	4602      	mov	r2, r0
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	1ad3      	subs	r3, r2, r3
 8001800:	2b02      	cmp	r3, #2
 8001802:	d901      	bls.n	8001808 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001804:	2303      	movs	r3, #3
 8001806:	e078      	b.n	80018fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001808:	4b3f      	ldr	r3, [pc, #252]	; (8001908 <HAL_RCC_OscConfig+0x4d8>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001810:	2b00      	cmp	r3, #0
 8001812:	d1f0      	bne.n	80017f6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	69da      	ldr	r2, [r3, #28]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6a1b      	ldr	r3, [r3, #32]
 800181c:	431a      	orrs	r2, r3
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001822:	019b      	lsls	r3, r3, #6
 8001824:	431a      	orrs	r2, r3
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800182a:	085b      	lsrs	r3, r3, #1
 800182c:	3b01      	subs	r3, #1
 800182e:	041b      	lsls	r3, r3, #16
 8001830:	431a      	orrs	r2, r3
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001836:	061b      	lsls	r3, r3, #24
 8001838:	4933      	ldr	r1, [pc, #204]	; (8001908 <HAL_RCC_OscConfig+0x4d8>)
 800183a:	4313      	orrs	r3, r2
 800183c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800183e:	4b33      	ldr	r3, [pc, #204]	; (800190c <HAL_RCC_OscConfig+0x4dc>)
 8001840:	2201      	movs	r2, #1
 8001842:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001844:	f7ff fb2a 	bl	8000e9c <HAL_GetTick>
 8001848:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800184a:	e008      	b.n	800185e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800184c:	f7ff fb26 	bl	8000e9c <HAL_GetTick>
 8001850:	4602      	mov	r2, r0
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	2b02      	cmp	r3, #2
 8001858:	d901      	bls.n	800185e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800185a:	2303      	movs	r3, #3
 800185c:	e04d      	b.n	80018fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800185e:	4b2a      	ldr	r3, [pc, #168]	; (8001908 <HAL_RCC_OscConfig+0x4d8>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001866:	2b00      	cmp	r3, #0
 8001868:	d0f0      	beq.n	800184c <HAL_RCC_OscConfig+0x41c>
 800186a:	e045      	b.n	80018f8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800186c:	4b27      	ldr	r3, [pc, #156]	; (800190c <HAL_RCC_OscConfig+0x4dc>)
 800186e:	2200      	movs	r2, #0
 8001870:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001872:	f7ff fb13 	bl	8000e9c <HAL_GetTick>
 8001876:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001878:	e008      	b.n	800188c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800187a:	f7ff fb0f 	bl	8000e9c <HAL_GetTick>
 800187e:	4602      	mov	r2, r0
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	1ad3      	subs	r3, r2, r3
 8001884:	2b02      	cmp	r3, #2
 8001886:	d901      	bls.n	800188c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001888:	2303      	movs	r3, #3
 800188a:	e036      	b.n	80018fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800188c:	4b1e      	ldr	r3, [pc, #120]	; (8001908 <HAL_RCC_OscConfig+0x4d8>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001894:	2b00      	cmp	r3, #0
 8001896:	d1f0      	bne.n	800187a <HAL_RCC_OscConfig+0x44a>
 8001898:	e02e      	b.n	80018f8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	699b      	ldr	r3, [r3, #24]
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d101      	bne.n	80018a6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	e029      	b.n	80018fa <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80018a6:	4b18      	ldr	r3, [pc, #96]	; (8001908 <HAL_RCC_OscConfig+0x4d8>)
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	69db      	ldr	r3, [r3, #28]
 80018b6:	429a      	cmp	r2, r3
 80018b8:	d11c      	bne.n	80018f4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018c4:	429a      	cmp	r2, r3
 80018c6:	d115      	bne.n	80018f4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80018c8:	68fa      	ldr	r2, [r7, #12]
 80018ca:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80018ce:	4013      	ands	r3, r2
 80018d0:	687a      	ldr	r2, [r7, #4]
 80018d2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d10d      	bne.n	80018f4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80018e2:	429a      	cmp	r2, r3
 80018e4:	d106      	bne.n	80018f4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d001      	beq.n	80018f8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80018f4:	2301      	movs	r3, #1
 80018f6:	e000      	b.n	80018fa <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80018f8:	2300      	movs	r3, #0
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3718      	adds	r7, #24
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	40007000 	.word	0x40007000
 8001908:	40023800 	.word	0x40023800
 800190c:	42470060 	.word	0x42470060

08001910 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b084      	sub	sp, #16
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
 8001918:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d101      	bne.n	8001924 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	e0cc      	b.n	8001abe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001924:	4b68      	ldr	r3, [pc, #416]	; (8001ac8 <HAL_RCC_ClockConfig+0x1b8>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f003 030f 	and.w	r3, r3, #15
 800192c:	683a      	ldr	r2, [r7, #0]
 800192e:	429a      	cmp	r2, r3
 8001930:	d90c      	bls.n	800194c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001932:	4b65      	ldr	r3, [pc, #404]	; (8001ac8 <HAL_RCC_ClockConfig+0x1b8>)
 8001934:	683a      	ldr	r2, [r7, #0]
 8001936:	b2d2      	uxtb	r2, r2
 8001938:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800193a:	4b63      	ldr	r3, [pc, #396]	; (8001ac8 <HAL_RCC_ClockConfig+0x1b8>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f003 030f 	and.w	r3, r3, #15
 8001942:	683a      	ldr	r2, [r7, #0]
 8001944:	429a      	cmp	r2, r3
 8001946:	d001      	beq.n	800194c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001948:	2301      	movs	r3, #1
 800194a:	e0b8      	b.n	8001abe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f003 0302 	and.w	r3, r3, #2
 8001954:	2b00      	cmp	r3, #0
 8001956:	d020      	beq.n	800199a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f003 0304 	and.w	r3, r3, #4
 8001960:	2b00      	cmp	r3, #0
 8001962:	d005      	beq.n	8001970 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001964:	4b59      	ldr	r3, [pc, #356]	; (8001acc <HAL_RCC_ClockConfig+0x1bc>)
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	4a58      	ldr	r2, [pc, #352]	; (8001acc <HAL_RCC_ClockConfig+0x1bc>)
 800196a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800196e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 0308 	and.w	r3, r3, #8
 8001978:	2b00      	cmp	r3, #0
 800197a:	d005      	beq.n	8001988 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800197c:	4b53      	ldr	r3, [pc, #332]	; (8001acc <HAL_RCC_ClockConfig+0x1bc>)
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	4a52      	ldr	r2, [pc, #328]	; (8001acc <HAL_RCC_ClockConfig+0x1bc>)
 8001982:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001986:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001988:	4b50      	ldr	r3, [pc, #320]	; (8001acc <HAL_RCC_ClockConfig+0x1bc>)
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	494d      	ldr	r1, [pc, #308]	; (8001acc <HAL_RCC_ClockConfig+0x1bc>)
 8001996:	4313      	orrs	r3, r2
 8001998:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 0301 	and.w	r3, r3, #1
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d044      	beq.n	8001a30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	d107      	bne.n	80019be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019ae:	4b47      	ldr	r3, [pc, #284]	; (8001acc <HAL_RCC_ClockConfig+0x1bc>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d119      	bne.n	80019ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e07f      	b.n	8001abe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	2b02      	cmp	r3, #2
 80019c4:	d003      	beq.n	80019ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019ca:	2b03      	cmp	r3, #3
 80019cc:	d107      	bne.n	80019de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019ce:	4b3f      	ldr	r3, [pc, #252]	; (8001acc <HAL_RCC_ClockConfig+0x1bc>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d109      	bne.n	80019ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e06f      	b.n	8001abe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019de:	4b3b      	ldr	r3, [pc, #236]	; (8001acc <HAL_RCC_ClockConfig+0x1bc>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 0302 	and.w	r3, r3, #2
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d101      	bne.n	80019ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	e067      	b.n	8001abe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019ee:	4b37      	ldr	r3, [pc, #220]	; (8001acc <HAL_RCC_ClockConfig+0x1bc>)
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	f023 0203 	bic.w	r2, r3, #3
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	4934      	ldr	r1, [pc, #208]	; (8001acc <HAL_RCC_ClockConfig+0x1bc>)
 80019fc:	4313      	orrs	r3, r2
 80019fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a00:	f7ff fa4c 	bl	8000e9c <HAL_GetTick>
 8001a04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a06:	e00a      	b.n	8001a1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a08:	f7ff fa48 	bl	8000e9c <HAL_GetTick>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d901      	bls.n	8001a1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e04f      	b.n	8001abe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a1e:	4b2b      	ldr	r3, [pc, #172]	; (8001acc <HAL_RCC_ClockConfig+0x1bc>)
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	f003 020c 	and.w	r2, r3, #12
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	d1eb      	bne.n	8001a08 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a30:	4b25      	ldr	r3, [pc, #148]	; (8001ac8 <HAL_RCC_ClockConfig+0x1b8>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f003 030f 	and.w	r3, r3, #15
 8001a38:	683a      	ldr	r2, [r7, #0]
 8001a3a:	429a      	cmp	r2, r3
 8001a3c:	d20c      	bcs.n	8001a58 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a3e:	4b22      	ldr	r3, [pc, #136]	; (8001ac8 <HAL_RCC_ClockConfig+0x1b8>)
 8001a40:	683a      	ldr	r2, [r7, #0]
 8001a42:	b2d2      	uxtb	r2, r2
 8001a44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a46:	4b20      	ldr	r3, [pc, #128]	; (8001ac8 <HAL_RCC_ClockConfig+0x1b8>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 030f 	and.w	r3, r3, #15
 8001a4e:	683a      	ldr	r2, [r7, #0]
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d001      	beq.n	8001a58 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a54:	2301      	movs	r3, #1
 8001a56:	e032      	b.n	8001abe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f003 0304 	and.w	r3, r3, #4
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d008      	beq.n	8001a76 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a64:	4b19      	ldr	r3, [pc, #100]	; (8001acc <HAL_RCC_ClockConfig+0x1bc>)
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	4916      	ldr	r1, [pc, #88]	; (8001acc <HAL_RCC_ClockConfig+0x1bc>)
 8001a72:	4313      	orrs	r3, r2
 8001a74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 0308 	and.w	r3, r3, #8
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d009      	beq.n	8001a96 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a82:	4b12      	ldr	r3, [pc, #72]	; (8001acc <HAL_RCC_ClockConfig+0x1bc>)
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	691b      	ldr	r3, [r3, #16]
 8001a8e:	00db      	lsls	r3, r3, #3
 8001a90:	490e      	ldr	r1, [pc, #56]	; (8001acc <HAL_RCC_ClockConfig+0x1bc>)
 8001a92:	4313      	orrs	r3, r2
 8001a94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a96:	f000 f821 	bl	8001adc <HAL_RCC_GetSysClockFreq>
 8001a9a:	4601      	mov	r1, r0
 8001a9c:	4b0b      	ldr	r3, [pc, #44]	; (8001acc <HAL_RCC_ClockConfig+0x1bc>)
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	091b      	lsrs	r3, r3, #4
 8001aa2:	f003 030f 	and.w	r3, r3, #15
 8001aa6:	4a0a      	ldr	r2, [pc, #40]	; (8001ad0 <HAL_RCC_ClockConfig+0x1c0>)
 8001aa8:	5cd3      	ldrb	r3, [r2, r3]
 8001aaa:	fa21 f303 	lsr.w	r3, r1, r3
 8001aae:	4a09      	ldr	r2, [pc, #36]	; (8001ad4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ab0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001ab2:	4b09      	ldr	r3, [pc, #36]	; (8001ad8 <HAL_RCC_ClockConfig+0x1c8>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f7ff f9ac 	bl	8000e14 <HAL_InitTick>

  return HAL_OK;
 8001abc:	2300      	movs	r3, #0
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3710      	adds	r7, #16
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	40023c00 	.word	0x40023c00
 8001acc:	40023800 	.word	0x40023800
 8001ad0:	08002934 	.word	0x08002934
 8001ad4:	20000000 	.word	0x20000000
 8001ad8:	20000004 	.word	0x20000004

08001adc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001adc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ade:	b085      	sub	sp, #20
 8001ae0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	607b      	str	r3, [r7, #4]
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	60fb      	str	r3, [r7, #12]
 8001aea:	2300      	movs	r3, #0
 8001aec:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001aee:	2300      	movs	r3, #0
 8001af0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001af2:	4b50      	ldr	r3, [pc, #320]	; (8001c34 <HAL_RCC_GetSysClockFreq+0x158>)
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	f003 030c 	and.w	r3, r3, #12
 8001afa:	2b04      	cmp	r3, #4
 8001afc:	d007      	beq.n	8001b0e <HAL_RCC_GetSysClockFreq+0x32>
 8001afe:	2b08      	cmp	r3, #8
 8001b00:	d008      	beq.n	8001b14 <HAL_RCC_GetSysClockFreq+0x38>
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	f040 808d 	bne.w	8001c22 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b08:	4b4b      	ldr	r3, [pc, #300]	; (8001c38 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001b0a:	60bb      	str	r3, [r7, #8]
       break;
 8001b0c:	e08c      	b.n	8001c28 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b0e:	4b4b      	ldr	r3, [pc, #300]	; (8001c3c <HAL_RCC_GetSysClockFreq+0x160>)
 8001b10:	60bb      	str	r3, [r7, #8]
      break;
 8001b12:	e089      	b.n	8001c28 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b14:	4b47      	ldr	r3, [pc, #284]	; (8001c34 <HAL_RCC_GetSysClockFreq+0x158>)
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b1c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b1e:	4b45      	ldr	r3, [pc, #276]	; (8001c34 <HAL_RCC_GetSysClockFreq+0x158>)
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d023      	beq.n	8001b72 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b2a:	4b42      	ldr	r3, [pc, #264]	; (8001c34 <HAL_RCC_GetSysClockFreq+0x158>)
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	099b      	lsrs	r3, r3, #6
 8001b30:	f04f 0400 	mov.w	r4, #0
 8001b34:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001b38:	f04f 0200 	mov.w	r2, #0
 8001b3c:	ea03 0501 	and.w	r5, r3, r1
 8001b40:	ea04 0602 	and.w	r6, r4, r2
 8001b44:	4a3d      	ldr	r2, [pc, #244]	; (8001c3c <HAL_RCC_GetSysClockFreq+0x160>)
 8001b46:	fb02 f106 	mul.w	r1, r2, r6
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	fb02 f205 	mul.w	r2, r2, r5
 8001b50:	440a      	add	r2, r1
 8001b52:	493a      	ldr	r1, [pc, #232]	; (8001c3c <HAL_RCC_GetSysClockFreq+0x160>)
 8001b54:	fba5 0101 	umull	r0, r1, r5, r1
 8001b58:	1853      	adds	r3, r2, r1
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	f04f 0400 	mov.w	r4, #0
 8001b62:	461a      	mov	r2, r3
 8001b64:	4623      	mov	r3, r4
 8001b66:	f7fe fb35 	bl	80001d4 <__aeabi_uldivmod>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	460c      	mov	r4, r1
 8001b6e:	60fb      	str	r3, [r7, #12]
 8001b70:	e049      	b.n	8001c06 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b72:	4b30      	ldr	r3, [pc, #192]	; (8001c34 <HAL_RCC_GetSysClockFreq+0x158>)
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	099b      	lsrs	r3, r3, #6
 8001b78:	f04f 0400 	mov.w	r4, #0
 8001b7c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001b80:	f04f 0200 	mov.w	r2, #0
 8001b84:	ea03 0501 	and.w	r5, r3, r1
 8001b88:	ea04 0602 	and.w	r6, r4, r2
 8001b8c:	4629      	mov	r1, r5
 8001b8e:	4632      	mov	r2, r6
 8001b90:	f04f 0300 	mov.w	r3, #0
 8001b94:	f04f 0400 	mov.w	r4, #0
 8001b98:	0154      	lsls	r4, r2, #5
 8001b9a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001b9e:	014b      	lsls	r3, r1, #5
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	4622      	mov	r2, r4
 8001ba4:	1b49      	subs	r1, r1, r5
 8001ba6:	eb62 0206 	sbc.w	r2, r2, r6
 8001baa:	f04f 0300 	mov.w	r3, #0
 8001bae:	f04f 0400 	mov.w	r4, #0
 8001bb2:	0194      	lsls	r4, r2, #6
 8001bb4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001bb8:	018b      	lsls	r3, r1, #6
 8001bba:	1a5b      	subs	r3, r3, r1
 8001bbc:	eb64 0402 	sbc.w	r4, r4, r2
 8001bc0:	f04f 0100 	mov.w	r1, #0
 8001bc4:	f04f 0200 	mov.w	r2, #0
 8001bc8:	00e2      	lsls	r2, r4, #3
 8001bca:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001bce:	00d9      	lsls	r1, r3, #3
 8001bd0:	460b      	mov	r3, r1
 8001bd2:	4614      	mov	r4, r2
 8001bd4:	195b      	adds	r3, r3, r5
 8001bd6:	eb44 0406 	adc.w	r4, r4, r6
 8001bda:	f04f 0100 	mov.w	r1, #0
 8001bde:	f04f 0200 	mov.w	r2, #0
 8001be2:	02a2      	lsls	r2, r4, #10
 8001be4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001be8:	0299      	lsls	r1, r3, #10
 8001bea:	460b      	mov	r3, r1
 8001bec:	4614      	mov	r4, r2
 8001bee:	4618      	mov	r0, r3
 8001bf0:	4621      	mov	r1, r4
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	f04f 0400 	mov.w	r4, #0
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	4623      	mov	r3, r4
 8001bfc:	f7fe faea 	bl	80001d4 <__aeabi_uldivmod>
 8001c00:	4603      	mov	r3, r0
 8001c02:	460c      	mov	r4, r1
 8001c04:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001c06:	4b0b      	ldr	r3, [pc, #44]	; (8001c34 <HAL_RCC_GetSysClockFreq+0x158>)
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	0c1b      	lsrs	r3, r3, #16
 8001c0c:	f003 0303 	and.w	r3, r3, #3
 8001c10:	3301      	adds	r3, #1
 8001c12:	005b      	lsls	r3, r3, #1
 8001c14:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001c16:	68fa      	ldr	r2, [r7, #12]
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c1e:	60bb      	str	r3, [r7, #8]
      break;
 8001c20:	e002      	b.n	8001c28 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c22:	4b05      	ldr	r3, [pc, #20]	; (8001c38 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001c24:	60bb      	str	r3, [r7, #8]
      break;
 8001c26:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c28:	68bb      	ldr	r3, [r7, #8]
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3714      	adds	r7, #20
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c32:	bf00      	nop
 8001c34:	40023800 	.word	0x40023800
 8001c38:	00f42400 	.word	0x00f42400
 8001c3c:	017d7840 	.word	0x017d7840

08001c40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c44:	4b03      	ldr	r3, [pc, #12]	; (8001c54 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c46:	681b      	ldr	r3, [r3, #0]
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	20000000 	.word	0x20000000

08001c58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001c5c:	f7ff fff0 	bl	8001c40 <HAL_RCC_GetHCLKFreq>
 8001c60:	4601      	mov	r1, r0
 8001c62:	4b05      	ldr	r3, [pc, #20]	; (8001c78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c64:	689b      	ldr	r3, [r3, #8]
 8001c66:	0a9b      	lsrs	r3, r3, #10
 8001c68:	f003 0307 	and.w	r3, r3, #7
 8001c6c:	4a03      	ldr	r2, [pc, #12]	; (8001c7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c6e:	5cd3      	ldrb	r3, [r2, r3]
 8001c70:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	40023800 	.word	0x40023800
 8001c7c:	08002944 	.word	0x08002944

08001c80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001c84:	f7ff ffdc 	bl	8001c40 <HAL_RCC_GetHCLKFreq>
 8001c88:	4601      	mov	r1, r0
 8001c8a:	4b05      	ldr	r3, [pc, #20]	; (8001ca0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	0b5b      	lsrs	r3, r3, #13
 8001c90:	f003 0307 	and.w	r3, r3, #7
 8001c94:	4a03      	ldr	r2, [pc, #12]	; (8001ca4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c96:	5cd3      	ldrb	r3, [r2, r3]
 8001c98:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	40023800 	.word	0x40023800
 8001ca4:	08002944 	.word	0x08002944

08001ca8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d101      	bne.n	8001cba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e056      	b.n	8001d68 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001cc6:	b2db      	uxtb	r3, r3
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d106      	bne.n	8001cda <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2200      	movs	r2, #0
 8001cd0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001cd4:	6878      	ldr	r0, [r7, #4]
 8001cd6:	f7fe ff81 	bl	8000bdc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2202      	movs	r2, #2
 8001cde:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001cf0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	685a      	ldr	r2, [r3, #4]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	431a      	orrs	r2, r3
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	431a      	orrs	r2, r3
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	691b      	ldr	r3, [r3, #16]
 8001d06:	431a      	orrs	r2, r3
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	695b      	ldr	r3, [r3, #20]
 8001d0c:	431a      	orrs	r2, r3
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	699b      	ldr	r3, [r3, #24]
 8001d12:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d16:	431a      	orrs	r2, r3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	69db      	ldr	r3, [r3, #28]
 8001d1c:	431a      	orrs	r2, r3
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6a1b      	ldr	r3, [r3, #32]
 8001d22:	ea42 0103 	orr.w	r1, r2, r3
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	430a      	orrs	r2, r1
 8001d30:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	699b      	ldr	r3, [r3, #24]
 8001d36:	0c1b      	lsrs	r3, r3, #16
 8001d38:	f003 0104 	and.w	r1, r3, #4
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	430a      	orrs	r2, r1
 8001d46:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	69da      	ldr	r2, [r3, #28]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d56:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2201      	movs	r2, #1
 8001d62:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001d66:	2300      	movs	r3, #0
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	3708      	adds	r7, #8
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}

08001d70 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b088      	sub	sp, #32
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	60f8      	str	r0, [r7, #12]
 8001d78:	60b9      	str	r1, [r7, #8]
 8001d7a:	603b      	str	r3, [r7, #0]
 8001d7c:	4613      	mov	r3, r2
 8001d7e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001d80:	2300      	movs	r3, #0
 8001d82:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d101      	bne.n	8001d92 <HAL_SPI_Transmit+0x22>
 8001d8e:	2302      	movs	r3, #2
 8001d90:	e11e      	b.n	8001fd0 <HAL_SPI_Transmit+0x260>
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	2201      	movs	r2, #1
 8001d96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001d9a:	f7ff f87f 	bl	8000e9c <HAL_GetTick>
 8001d9e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001da0:	88fb      	ldrh	r3, [r7, #6]
 8001da2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001daa:	b2db      	uxtb	r3, r3
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d002      	beq.n	8001db6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001db0:	2302      	movs	r3, #2
 8001db2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001db4:	e103      	b.n	8001fbe <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d002      	beq.n	8001dc2 <HAL_SPI_Transmit+0x52>
 8001dbc:	88fb      	ldrh	r3, [r7, #6]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d102      	bne.n	8001dc8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001dc6:	e0fa      	b.n	8001fbe <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	2203      	movs	r2, #3
 8001dcc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	68ba      	ldr	r2, [r7, #8]
 8001dda:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	88fa      	ldrh	r2, [r7, #6]
 8001de0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	88fa      	ldrh	r2, [r7, #6]
 8001de6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	2200      	movs	r2, #0
 8001dec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	2200      	movs	r2, #0
 8001df2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	2200      	movs	r2, #0
 8001df8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	2200      	movs	r2, #0
 8001e04:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e0e:	d107      	bne.n	8001e20 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001e1e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e2a:	2b40      	cmp	r3, #64	; 0x40
 8001e2c:	d007      	beq.n	8001e3e <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e3c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	68db      	ldr	r3, [r3, #12]
 8001e42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001e46:	d14b      	bne.n	8001ee0 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d002      	beq.n	8001e56 <HAL_SPI_Transmit+0xe6>
 8001e50:	8afb      	ldrh	r3, [r7, #22]
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d13e      	bne.n	8001ed4 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5a:	881a      	ldrh	r2, [r3, #0]
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e66:	1c9a      	adds	r2, r3, #2
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e70:	b29b      	uxth	r3, r3
 8001e72:	3b01      	subs	r3, #1
 8001e74:	b29a      	uxth	r2, r3
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001e7a:	e02b      	b.n	8001ed4 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	f003 0302 	and.w	r3, r3, #2
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d112      	bne.n	8001eb0 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8e:	881a      	ldrh	r2, [r3, #0]
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9a:	1c9a      	adds	r2, r3, #2
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ea4:	b29b      	uxth	r3, r3
 8001ea6:	3b01      	subs	r3, #1
 8001ea8:	b29a      	uxth	r2, r3
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	86da      	strh	r2, [r3, #54]	; 0x36
 8001eae:	e011      	b.n	8001ed4 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001eb0:	f7fe fff4 	bl	8000e9c <HAL_GetTick>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	69bb      	ldr	r3, [r7, #24]
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	683a      	ldr	r2, [r7, #0]
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d803      	bhi.n	8001ec8 <HAL_SPI_Transmit+0x158>
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ec6:	d102      	bne.n	8001ece <HAL_SPI_Transmit+0x15e>
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d102      	bne.n	8001ed4 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001ed2:	e074      	b.n	8001fbe <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ed8:	b29b      	uxth	r3, r3
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d1ce      	bne.n	8001e7c <HAL_SPI_Transmit+0x10c>
 8001ede:	e04c      	b.n	8001f7a <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d002      	beq.n	8001eee <HAL_SPI_Transmit+0x17e>
 8001ee8:	8afb      	ldrh	r3, [r7, #22]
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d140      	bne.n	8001f70 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	330c      	adds	r3, #12
 8001ef8:	7812      	ldrb	r2, [r2, #0]
 8001efa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f00:	1c5a      	adds	r2, r3, #1
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f0a:	b29b      	uxth	r3, r3
 8001f0c:	3b01      	subs	r3, #1
 8001f0e:	b29a      	uxth	r2, r3
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001f14:	e02c      	b.n	8001f70 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	f003 0302 	and.w	r3, r3, #2
 8001f20:	2b02      	cmp	r3, #2
 8001f22:	d113      	bne.n	8001f4c <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	330c      	adds	r3, #12
 8001f2e:	7812      	ldrb	r2, [r2, #0]
 8001f30:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f36:	1c5a      	adds	r2, r3, #1
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f40:	b29b      	uxth	r3, r3
 8001f42:	3b01      	subs	r3, #1
 8001f44:	b29a      	uxth	r2, r3
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	86da      	strh	r2, [r3, #54]	; 0x36
 8001f4a:	e011      	b.n	8001f70 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001f4c:	f7fe ffa6 	bl	8000e9c <HAL_GetTick>
 8001f50:	4602      	mov	r2, r0
 8001f52:	69bb      	ldr	r3, [r7, #24]
 8001f54:	1ad3      	subs	r3, r2, r3
 8001f56:	683a      	ldr	r2, [r7, #0]
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d803      	bhi.n	8001f64 <HAL_SPI_Transmit+0x1f4>
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f62:	d102      	bne.n	8001f6a <HAL_SPI_Transmit+0x1fa>
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d102      	bne.n	8001f70 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001f6e:	e026      	b.n	8001fbe <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f74:	b29b      	uxth	r3, r3
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d1cd      	bne.n	8001f16 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001f7a:	69ba      	ldr	r2, [r7, #24]
 8001f7c:	6839      	ldr	r1, [r7, #0]
 8001f7e:	68f8      	ldr	r0, [r7, #12]
 8001f80:	f000 f894 	bl	80020ac <SPI_EndRxTxTransaction>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d002      	beq.n	8001f90 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	2220      	movs	r2, #32
 8001f8e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d10a      	bne.n	8001fae <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001f98:	2300      	movs	r3, #0
 8001f9a:	613b      	str	r3, [r7, #16]
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	68db      	ldr	r3, [r3, #12]
 8001fa2:	613b      	str	r3, [r7, #16]
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	613b      	str	r3, [r7, #16]
 8001fac:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d002      	beq.n	8001fbc <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	77fb      	strb	r3, [r7, #31]
 8001fba:	e000      	b.n	8001fbe <HAL_SPI_Transmit+0x24e>
  }

error:
 8001fbc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001fce:	7ffb      	ldrb	r3, [r7, #31]
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	3720      	adds	r7, #32
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}

08001fd8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b084      	sub	sp, #16
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	60f8      	str	r0, [r7, #12]
 8001fe0:	60b9      	str	r1, [r7, #8]
 8001fe2:	603b      	str	r3, [r7, #0]
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001fe8:	e04c      	b.n	8002084 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ff0:	d048      	beq.n	8002084 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8001ff2:	f7fe ff53 	bl	8000e9c <HAL_GetTick>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	69bb      	ldr	r3, [r7, #24]
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	683a      	ldr	r2, [r7, #0]
 8001ffe:	429a      	cmp	r2, r3
 8002000:	d902      	bls.n	8002008 <SPI_WaitFlagStateUntilTimeout+0x30>
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d13d      	bne.n	8002084 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	685a      	ldr	r2, [r3, #4]
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002016:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002020:	d111      	bne.n	8002046 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800202a:	d004      	beq.n	8002036 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002034:	d107      	bne.n	8002046 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002044:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800204a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800204e:	d10f      	bne.n	8002070 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800205e:	601a      	str	r2, [r3, #0]
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800206e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	2201      	movs	r2, #1
 8002074:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	2200      	movs	r2, #0
 800207c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002080:	2303      	movs	r3, #3
 8002082:	e00f      	b.n	80020a4 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	689a      	ldr	r2, [r3, #8]
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	4013      	ands	r3, r2
 800208e:	68ba      	ldr	r2, [r7, #8]
 8002090:	429a      	cmp	r2, r3
 8002092:	bf0c      	ite	eq
 8002094:	2301      	moveq	r3, #1
 8002096:	2300      	movne	r3, #0
 8002098:	b2db      	uxtb	r3, r3
 800209a:	461a      	mov	r2, r3
 800209c:	79fb      	ldrb	r3, [r7, #7]
 800209e:	429a      	cmp	r2, r3
 80020a0:	d1a3      	bne.n	8001fea <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80020a2:	2300      	movs	r3, #0
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	3710      	adds	r7, #16
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}

080020ac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b088      	sub	sp, #32
 80020b0:	af02      	add	r7, sp, #8
 80020b2:	60f8      	str	r0, [r7, #12]
 80020b4:	60b9      	str	r1, [r7, #8]
 80020b6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80020b8:	4b1b      	ldr	r3, [pc, #108]	; (8002128 <SPI_EndRxTxTransaction+0x7c>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a1b      	ldr	r2, [pc, #108]	; (800212c <SPI_EndRxTxTransaction+0x80>)
 80020be:	fba2 2303 	umull	r2, r3, r2, r3
 80020c2:	0d5b      	lsrs	r3, r3, #21
 80020c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80020c8:	fb02 f303 	mul.w	r3, r2, r3
 80020cc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80020d6:	d112      	bne.n	80020fe <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	9300      	str	r3, [sp, #0]
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	2200      	movs	r2, #0
 80020e0:	2180      	movs	r1, #128	; 0x80
 80020e2:	68f8      	ldr	r0, [r7, #12]
 80020e4:	f7ff ff78 	bl	8001fd8 <SPI_WaitFlagStateUntilTimeout>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d016      	beq.n	800211c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020f2:	f043 0220 	orr.w	r2, r3, #32
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80020fa:	2303      	movs	r3, #3
 80020fc:	e00f      	b.n	800211e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d00a      	beq.n	800211a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	3b01      	subs	r3, #1
 8002108:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002114:	2b80      	cmp	r3, #128	; 0x80
 8002116:	d0f2      	beq.n	80020fe <SPI_EndRxTxTransaction+0x52>
 8002118:	e000      	b.n	800211c <SPI_EndRxTxTransaction+0x70>
        break;
 800211a:	bf00      	nop
  }

  return HAL_OK;
 800211c:	2300      	movs	r3, #0
}
 800211e:	4618      	mov	r0, r3
 8002120:	3718      	adds	r7, #24
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	20000000 	.word	0x20000000
 800212c:	165e9f81 	.word	0x165e9f81

08002130 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d101      	bne.n	8002142 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e03f      	b.n	80021c2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002148:	b2db      	uxtb	r3, r3
 800214a:	2b00      	cmp	r3, #0
 800214c:	d106      	bne.n	800215c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2200      	movs	r2, #0
 8002152:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	f7fe fd88 	bl	8000c6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2224      	movs	r2, #36	; 0x24
 8002160:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	68da      	ldr	r2, [r3, #12]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002172:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002174:	6878      	ldr	r0, [r7, #4]
 8002176:	f000 f829 	bl	80021cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	691a      	ldr	r2, [r3, #16]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002188:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	695a      	ldr	r2, [r3, #20]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002198:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	68da      	ldr	r2, [r3, #12]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80021a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2200      	movs	r2, #0
 80021ae:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2220      	movs	r2, #32
 80021b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2220      	movs	r2, #32
 80021bc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80021c0:	2300      	movs	r3, #0
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3708      	adds	r7, #8
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
	...

080021cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80021cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80021d0:	b085      	sub	sp, #20
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	691b      	ldr	r3, [r3, #16]
 80021dc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	68da      	ldr	r2, [r3, #12]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	430a      	orrs	r2, r1
 80021ea:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	689a      	ldr	r2, [r3, #8]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	691b      	ldr	r3, [r3, #16]
 80021f4:	431a      	orrs	r2, r3
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	695b      	ldr	r3, [r3, #20]
 80021fa:	431a      	orrs	r2, r3
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	69db      	ldr	r3, [r3, #28]
 8002200:	4313      	orrs	r3, r2
 8002202:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	68db      	ldr	r3, [r3, #12]
 800220a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800220e:	f023 030c 	bic.w	r3, r3, #12
 8002212:	687a      	ldr	r2, [r7, #4]
 8002214:	6812      	ldr	r2, [r2, #0]
 8002216:	68f9      	ldr	r1, [r7, #12]
 8002218:	430b      	orrs	r3, r1
 800221a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	695b      	ldr	r3, [r3, #20]
 8002222:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	699a      	ldr	r2, [r3, #24]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	430a      	orrs	r2, r1
 8002230:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	69db      	ldr	r3, [r3, #28]
 8002236:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800223a:	f040 818b 	bne.w	8002554 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4ac1      	ldr	r2, [pc, #772]	; (8002548 <UART_SetConfig+0x37c>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d005      	beq.n	8002254 <UART_SetConfig+0x88>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4abf      	ldr	r2, [pc, #764]	; (800254c <UART_SetConfig+0x380>)
 800224e:	4293      	cmp	r3, r2
 8002250:	f040 80bd 	bne.w	80023ce <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002254:	f7ff fd14 	bl	8001c80 <HAL_RCC_GetPCLK2Freq>
 8002258:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	461d      	mov	r5, r3
 800225e:	f04f 0600 	mov.w	r6, #0
 8002262:	46a8      	mov	r8, r5
 8002264:	46b1      	mov	r9, r6
 8002266:	eb18 0308 	adds.w	r3, r8, r8
 800226a:	eb49 0409 	adc.w	r4, r9, r9
 800226e:	4698      	mov	r8, r3
 8002270:	46a1      	mov	r9, r4
 8002272:	eb18 0805 	adds.w	r8, r8, r5
 8002276:	eb49 0906 	adc.w	r9, r9, r6
 800227a:	f04f 0100 	mov.w	r1, #0
 800227e:	f04f 0200 	mov.w	r2, #0
 8002282:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002286:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800228a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800228e:	4688      	mov	r8, r1
 8002290:	4691      	mov	r9, r2
 8002292:	eb18 0005 	adds.w	r0, r8, r5
 8002296:	eb49 0106 	adc.w	r1, r9, r6
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	461d      	mov	r5, r3
 80022a0:	f04f 0600 	mov.w	r6, #0
 80022a4:	196b      	adds	r3, r5, r5
 80022a6:	eb46 0406 	adc.w	r4, r6, r6
 80022aa:	461a      	mov	r2, r3
 80022ac:	4623      	mov	r3, r4
 80022ae:	f7fd ff91 	bl	80001d4 <__aeabi_uldivmod>
 80022b2:	4603      	mov	r3, r0
 80022b4:	460c      	mov	r4, r1
 80022b6:	461a      	mov	r2, r3
 80022b8:	4ba5      	ldr	r3, [pc, #660]	; (8002550 <UART_SetConfig+0x384>)
 80022ba:	fba3 2302 	umull	r2, r3, r3, r2
 80022be:	095b      	lsrs	r3, r3, #5
 80022c0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	461d      	mov	r5, r3
 80022c8:	f04f 0600 	mov.w	r6, #0
 80022cc:	46a9      	mov	r9, r5
 80022ce:	46b2      	mov	sl, r6
 80022d0:	eb19 0309 	adds.w	r3, r9, r9
 80022d4:	eb4a 040a 	adc.w	r4, sl, sl
 80022d8:	4699      	mov	r9, r3
 80022da:	46a2      	mov	sl, r4
 80022dc:	eb19 0905 	adds.w	r9, r9, r5
 80022e0:	eb4a 0a06 	adc.w	sl, sl, r6
 80022e4:	f04f 0100 	mov.w	r1, #0
 80022e8:	f04f 0200 	mov.w	r2, #0
 80022ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80022f0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80022f4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80022f8:	4689      	mov	r9, r1
 80022fa:	4692      	mov	sl, r2
 80022fc:	eb19 0005 	adds.w	r0, r9, r5
 8002300:	eb4a 0106 	adc.w	r1, sl, r6
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	461d      	mov	r5, r3
 800230a:	f04f 0600 	mov.w	r6, #0
 800230e:	196b      	adds	r3, r5, r5
 8002310:	eb46 0406 	adc.w	r4, r6, r6
 8002314:	461a      	mov	r2, r3
 8002316:	4623      	mov	r3, r4
 8002318:	f7fd ff5c 	bl	80001d4 <__aeabi_uldivmod>
 800231c:	4603      	mov	r3, r0
 800231e:	460c      	mov	r4, r1
 8002320:	461a      	mov	r2, r3
 8002322:	4b8b      	ldr	r3, [pc, #556]	; (8002550 <UART_SetConfig+0x384>)
 8002324:	fba3 1302 	umull	r1, r3, r3, r2
 8002328:	095b      	lsrs	r3, r3, #5
 800232a:	2164      	movs	r1, #100	; 0x64
 800232c:	fb01 f303 	mul.w	r3, r1, r3
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	00db      	lsls	r3, r3, #3
 8002334:	3332      	adds	r3, #50	; 0x32
 8002336:	4a86      	ldr	r2, [pc, #536]	; (8002550 <UART_SetConfig+0x384>)
 8002338:	fba2 2303 	umull	r2, r3, r2, r3
 800233c:	095b      	lsrs	r3, r3, #5
 800233e:	005b      	lsls	r3, r3, #1
 8002340:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002344:	4498      	add	r8, r3
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	461d      	mov	r5, r3
 800234a:	f04f 0600 	mov.w	r6, #0
 800234e:	46a9      	mov	r9, r5
 8002350:	46b2      	mov	sl, r6
 8002352:	eb19 0309 	adds.w	r3, r9, r9
 8002356:	eb4a 040a 	adc.w	r4, sl, sl
 800235a:	4699      	mov	r9, r3
 800235c:	46a2      	mov	sl, r4
 800235e:	eb19 0905 	adds.w	r9, r9, r5
 8002362:	eb4a 0a06 	adc.w	sl, sl, r6
 8002366:	f04f 0100 	mov.w	r1, #0
 800236a:	f04f 0200 	mov.w	r2, #0
 800236e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002372:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002376:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800237a:	4689      	mov	r9, r1
 800237c:	4692      	mov	sl, r2
 800237e:	eb19 0005 	adds.w	r0, r9, r5
 8002382:	eb4a 0106 	adc.w	r1, sl, r6
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	461d      	mov	r5, r3
 800238c:	f04f 0600 	mov.w	r6, #0
 8002390:	196b      	adds	r3, r5, r5
 8002392:	eb46 0406 	adc.w	r4, r6, r6
 8002396:	461a      	mov	r2, r3
 8002398:	4623      	mov	r3, r4
 800239a:	f7fd ff1b 	bl	80001d4 <__aeabi_uldivmod>
 800239e:	4603      	mov	r3, r0
 80023a0:	460c      	mov	r4, r1
 80023a2:	461a      	mov	r2, r3
 80023a4:	4b6a      	ldr	r3, [pc, #424]	; (8002550 <UART_SetConfig+0x384>)
 80023a6:	fba3 1302 	umull	r1, r3, r3, r2
 80023aa:	095b      	lsrs	r3, r3, #5
 80023ac:	2164      	movs	r1, #100	; 0x64
 80023ae:	fb01 f303 	mul.w	r3, r1, r3
 80023b2:	1ad3      	subs	r3, r2, r3
 80023b4:	00db      	lsls	r3, r3, #3
 80023b6:	3332      	adds	r3, #50	; 0x32
 80023b8:	4a65      	ldr	r2, [pc, #404]	; (8002550 <UART_SetConfig+0x384>)
 80023ba:	fba2 2303 	umull	r2, r3, r2, r3
 80023be:	095b      	lsrs	r3, r3, #5
 80023c0:	f003 0207 	and.w	r2, r3, #7
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4442      	add	r2, r8
 80023ca:	609a      	str	r2, [r3, #8]
 80023cc:	e26f      	b.n	80028ae <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80023ce:	f7ff fc43 	bl	8001c58 <HAL_RCC_GetPCLK1Freq>
 80023d2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	461d      	mov	r5, r3
 80023d8:	f04f 0600 	mov.w	r6, #0
 80023dc:	46a8      	mov	r8, r5
 80023de:	46b1      	mov	r9, r6
 80023e0:	eb18 0308 	adds.w	r3, r8, r8
 80023e4:	eb49 0409 	adc.w	r4, r9, r9
 80023e8:	4698      	mov	r8, r3
 80023ea:	46a1      	mov	r9, r4
 80023ec:	eb18 0805 	adds.w	r8, r8, r5
 80023f0:	eb49 0906 	adc.w	r9, r9, r6
 80023f4:	f04f 0100 	mov.w	r1, #0
 80023f8:	f04f 0200 	mov.w	r2, #0
 80023fc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002400:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002404:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002408:	4688      	mov	r8, r1
 800240a:	4691      	mov	r9, r2
 800240c:	eb18 0005 	adds.w	r0, r8, r5
 8002410:	eb49 0106 	adc.w	r1, r9, r6
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	461d      	mov	r5, r3
 800241a:	f04f 0600 	mov.w	r6, #0
 800241e:	196b      	adds	r3, r5, r5
 8002420:	eb46 0406 	adc.w	r4, r6, r6
 8002424:	461a      	mov	r2, r3
 8002426:	4623      	mov	r3, r4
 8002428:	f7fd fed4 	bl	80001d4 <__aeabi_uldivmod>
 800242c:	4603      	mov	r3, r0
 800242e:	460c      	mov	r4, r1
 8002430:	461a      	mov	r2, r3
 8002432:	4b47      	ldr	r3, [pc, #284]	; (8002550 <UART_SetConfig+0x384>)
 8002434:	fba3 2302 	umull	r2, r3, r3, r2
 8002438:	095b      	lsrs	r3, r3, #5
 800243a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	461d      	mov	r5, r3
 8002442:	f04f 0600 	mov.w	r6, #0
 8002446:	46a9      	mov	r9, r5
 8002448:	46b2      	mov	sl, r6
 800244a:	eb19 0309 	adds.w	r3, r9, r9
 800244e:	eb4a 040a 	adc.w	r4, sl, sl
 8002452:	4699      	mov	r9, r3
 8002454:	46a2      	mov	sl, r4
 8002456:	eb19 0905 	adds.w	r9, r9, r5
 800245a:	eb4a 0a06 	adc.w	sl, sl, r6
 800245e:	f04f 0100 	mov.w	r1, #0
 8002462:	f04f 0200 	mov.w	r2, #0
 8002466:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800246a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800246e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002472:	4689      	mov	r9, r1
 8002474:	4692      	mov	sl, r2
 8002476:	eb19 0005 	adds.w	r0, r9, r5
 800247a:	eb4a 0106 	adc.w	r1, sl, r6
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	461d      	mov	r5, r3
 8002484:	f04f 0600 	mov.w	r6, #0
 8002488:	196b      	adds	r3, r5, r5
 800248a:	eb46 0406 	adc.w	r4, r6, r6
 800248e:	461a      	mov	r2, r3
 8002490:	4623      	mov	r3, r4
 8002492:	f7fd fe9f 	bl	80001d4 <__aeabi_uldivmod>
 8002496:	4603      	mov	r3, r0
 8002498:	460c      	mov	r4, r1
 800249a:	461a      	mov	r2, r3
 800249c:	4b2c      	ldr	r3, [pc, #176]	; (8002550 <UART_SetConfig+0x384>)
 800249e:	fba3 1302 	umull	r1, r3, r3, r2
 80024a2:	095b      	lsrs	r3, r3, #5
 80024a4:	2164      	movs	r1, #100	; 0x64
 80024a6:	fb01 f303 	mul.w	r3, r1, r3
 80024aa:	1ad3      	subs	r3, r2, r3
 80024ac:	00db      	lsls	r3, r3, #3
 80024ae:	3332      	adds	r3, #50	; 0x32
 80024b0:	4a27      	ldr	r2, [pc, #156]	; (8002550 <UART_SetConfig+0x384>)
 80024b2:	fba2 2303 	umull	r2, r3, r2, r3
 80024b6:	095b      	lsrs	r3, r3, #5
 80024b8:	005b      	lsls	r3, r3, #1
 80024ba:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80024be:	4498      	add	r8, r3
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	461d      	mov	r5, r3
 80024c4:	f04f 0600 	mov.w	r6, #0
 80024c8:	46a9      	mov	r9, r5
 80024ca:	46b2      	mov	sl, r6
 80024cc:	eb19 0309 	adds.w	r3, r9, r9
 80024d0:	eb4a 040a 	adc.w	r4, sl, sl
 80024d4:	4699      	mov	r9, r3
 80024d6:	46a2      	mov	sl, r4
 80024d8:	eb19 0905 	adds.w	r9, r9, r5
 80024dc:	eb4a 0a06 	adc.w	sl, sl, r6
 80024e0:	f04f 0100 	mov.w	r1, #0
 80024e4:	f04f 0200 	mov.w	r2, #0
 80024e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80024ec:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80024f0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80024f4:	4689      	mov	r9, r1
 80024f6:	4692      	mov	sl, r2
 80024f8:	eb19 0005 	adds.w	r0, r9, r5
 80024fc:	eb4a 0106 	adc.w	r1, sl, r6
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	461d      	mov	r5, r3
 8002506:	f04f 0600 	mov.w	r6, #0
 800250a:	196b      	adds	r3, r5, r5
 800250c:	eb46 0406 	adc.w	r4, r6, r6
 8002510:	461a      	mov	r2, r3
 8002512:	4623      	mov	r3, r4
 8002514:	f7fd fe5e 	bl	80001d4 <__aeabi_uldivmod>
 8002518:	4603      	mov	r3, r0
 800251a:	460c      	mov	r4, r1
 800251c:	461a      	mov	r2, r3
 800251e:	4b0c      	ldr	r3, [pc, #48]	; (8002550 <UART_SetConfig+0x384>)
 8002520:	fba3 1302 	umull	r1, r3, r3, r2
 8002524:	095b      	lsrs	r3, r3, #5
 8002526:	2164      	movs	r1, #100	; 0x64
 8002528:	fb01 f303 	mul.w	r3, r1, r3
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	00db      	lsls	r3, r3, #3
 8002530:	3332      	adds	r3, #50	; 0x32
 8002532:	4a07      	ldr	r2, [pc, #28]	; (8002550 <UART_SetConfig+0x384>)
 8002534:	fba2 2303 	umull	r2, r3, r2, r3
 8002538:	095b      	lsrs	r3, r3, #5
 800253a:	f003 0207 	and.w	r2, r3, #7
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4442      	add	r2, r8
 8002544:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8002546:	e1b2      	b.n	80028ae <UART_SetConfig+0x6e2>
 8002548:	40011000 	.word	0x40011000
 800254c:	40011400 	.word	0x40011400
 8002550:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4ad7      	ldr	r2, [pc, #860]	; (80028b8 <UART_SetConfig+0x6ec>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d005      	beq.n	800256a <UART_SetConfig+0x39e>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4ad6      	ldr	r2, [pc, #856]	; (80028bc <UART_SetConfig+0x6f0>)
 8002564:	4293      	cmp	r3, r2
 8002566:	f040 80d1 	bne.w	800270c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800256a:	f7ff fb89 	bl	8001c80 <HAL_RCC_GetPCLK2Freq>
 800256e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	469a      	mov	sl, r3
 8002574:	f04f 0b00 	mov.w	fp, #0
 8002578:	46d0      	mov	r8, sl
 800257a:	46d9      	mov	r9, fp
 800257c:	eb18 0308 	adds.w	r3, r8, r8
 8002580:	eb49 0409 	adc.w	r4, r9, r9
 8002584:	4698      	mov	r8, r3
 8002586:	46a1      	mov	r9, r4
 8002588:	eb18 080a 	adds.w	r8, r8, sl
 800258c:	eb49 090b 	adc.w	r9, r9, fp
 8002590:	f04f 0100 	mov.w	r1, #0
 8002594:	f04f 0200 	mov.w	r2, #0
 8002598:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800259c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80025a0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80025a4:	4688      	mov	r8, r1
 80025a6:	4691      	mov	r9, r2
 80025a8:	eb1a 0508 	adds.w	r5, sl, r8
 80025ac:	eb4b 0609 	adc.w	r6, fp, r9
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	4619      	mov	r1, r3
 80025b6:	f04f 0200 	mov.w	r2, #0
 80025ba:	f04f 0300 	mov.w	r3, #0
 80025be:	f04f 0400 	mov.w	r4, #0
 80025c2:	0094      	lsls	r4, r2, #2
 80025c4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80025c8:	008b      	lsls	r3, r1, #2
 80025ca:	461a      	mov	r2, r3
 80025cc:	4623      	mov	r3, r4
 80025ce:	4628      	mov	r0, r5
 80025d0:	4631      	mov	r1, r6
 80025d2:	f7fd fdff 	bl	80001d4 <__aeabi_uldivmod>
 80025d6:	4603      	mov	r3, r0
 80025d8:	460c      	mov	r4, r1
 80025da:	461a      	mov	r2, r3
 80025dc:	4bb8      	ldr	r3, [pc, #736]	; (80028c0 <UART_SetConfig+0x6f4>)
 80025de:	fba3 2302 	umull	r2, r3, r3, r2
 80025e2:	095b      	lsrs	r3, r3, #5
 80025e4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	469b      	mov	fp, r3
 80025ec:	f04f 0c00 	mov.w	ip, #0
 80025f0:	46d9      	mov	r9, fp
 80025f2:	46e2      	mov	sl, ip
 80025f4:	eb19 0309 	adds.w	r3, r9, r9
 80025f8:	eb4a 040a 	adc.w	r4, sl, sl
 80025fc:	4699      	mov	r9, r3
 80025fe:	46a2      	mov	sl, r4
 8002600:	eb19 090b 	adds.w	r9, r9, fp
 8002604:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002608:	f04f 0100 	mov.w	r1, #0
 800260c:	f04f 0200 	mov.w	r2, #0
 8002610:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002614:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002618:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800261c:	4689      	mov	r9, r1
 800261e:	4692      	mov	sl, r2
 8002620:	eb1b 0509 	adds.w	r5, fp, r9
 8002624:	eb4c 060a 	adc.w	r6, ip, sl
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	4619      	mov	r1, r3
 800262e:	f04f 0200 	mov.w	r2, #0
 8002632:	f04f 0300 	mov.w	r3, #0
 8002636:	f04f 0400 	mov.w	r4, #0
 800263a:	0094      	lsls	r4, r2, #2
 800263c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002640:	008b      	lsls	r3, r1, #2
 8002642:	461a      	mov	r2, r3
 8002644:	4623      	mov	r3, r4
 8002646:	4628      	mov	r0, r5
 8002648:	4631      	mov	r1, r6
 800264a:	f7fd fdc3 	bl	80001d4 <__aeabi_uldivmod>
 800264e:	4603      	mov	r3, r0
 8002650:	460c      	mov	r4, r1
 8002652:	461a      	mov	r2, r3
 8002654:	4b9a      	ldr	r3, [pc, #616]	; (80028c0 <UART_SetConfig+0x6f4>)
 8002656:	fba3 1302 	umull	r1, r3, r3, r2
 800265a:	095b      	lsrs	r3, r3, #5
 800265c:	2164      	movs	r1, #100	; 0x64
 800265e:	fb01 f303 	mul.w	r3, r1, r3
 8002662:	1ad3      	subs	r3, r2, r3
 8002664:	011b      	lsls	r3, r3, #4
 8002666:	3332      	adds	r3, #50	; 0x32
 8002668:	4a95      	ldr	r2, [pc, #596]	; (80028c0 <UART_SetConfig+0x6f4>)
 800266a:	fba2 2303 	umull	r2, r3, r2, r3
 800266e:	095b      	lsrs	r3, r3, #5
 8002670:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002674:	4498      	add	r8, r3
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	469b      	mov	fp, r3
 800267a:	f04f 0c00 	mov.w	ip, #0
 800267e:	46d9      	mov	r9, fp
 8002680:	46e2      	mov	sl, ip
 8002682:	eb19 0309 	adds.w	r3, r9, r9
 8002686:	eb4a 040a 	adc.w	r4, sl, sl
 800268a:	4699      	mov	r9, r3
 800268c:	46a2      	mov	sl, r4
 800268e:	eb19 090b 	adds.w	r9, r9, fp
 8002692:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002696:	f04f 0100 	mov.w	r1, #0
 800269a:	f04f 0200 	mov.w	r2, #0
 800269e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80026a2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80026a6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80026aa:	4689      	mov	r9, r1
 80026ac:	4692      	mov	sl, r2
 80026ae:	eb1b 0509 	adds.w	r5, fp, r9
 80026b2:	eb4c 060a 	adc.w	r6, ip, sl
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	4619      	mov	r1, r3
 80026bc:	f04f 0200 	mov.w	r2, #0
 80026c0:	f04f 0300 	mov.w	r3, #0
 80026c4:	f04f 0400 	mov.w	r4, #0
 80026c8:	0094      	lsls	r4, r2, #2
 80026ca:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80026ce:	008b      	lsls	r3, r1, #2
 80026d0:	461a      	mov	r2, r3
 80026d2:	4623      	mov	r3, r4
 80026d4:	4628      	mov	r0, r5
 80026d6:	4631      	mov	r1, r6
 80026d8:	f7fd fd7c 	bl	80001d4 <__aeabi_uldivmod>
 80026dc:	4603      	mov	r3, r0
 80026de:	460c      	mov	r4, r1
 80026e0:	461a      	mov	r2, r3
 80026e2:	4b77      	ldr	r3, [pc, #476]	; (80028c0 <UART_SetConfig+0x6f4>)
 80026e4:	fba3 1302 	umull	r1, r3, r3, r2
 80026e8:	095b      	lsrs	r3, r3, #5
 80026ea:	2164      	movs	r1, #100	; 0x64
 80026ec:	fb01 f303 	mul.w	r3, r1, r3
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	011b      	lsls	r3, r3, #4
 80026f4:	3332      	adds	r3, #50	; 0x32
 80026f6:	4a72      	ldr	r2, [pc, #456]	; (80028c0 <UART_SetConfig+0x6f4>)
 80026f8:	fba2 2303 	umull	r2, r3, r2, r3
 80026fc:	095b      	lsrs	r3, r3, #5
 80026fe:	f003 020f 	and.w	r2, r3, #15
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4442      	add	r2, r8
 8002708:	609a      	str	r2, [r3, #8]
 800270a:	e0d0      	b.n	80028ae <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800270c:	f7ff faa4 	bl	8001c58 <HAL_RCC_GetPCLK1Freq>
 8002710:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	469a      	mov	sl, r3
 8002716:	f04f 0b00 	mov.w	fp, #0
 800271a:	46d0      	mov	r8, sl
 800271c:	46d9      	mov	r9, fp
 800271e:	eb18 0308 	adds.w	r3, r8, r8
 8002722:	eb49 0409 	adc.w	r4, r9, r9
 8002726:	4698      	mov	r8, r3
 8002728:	46a1      	mov	r9, r4
 800272a:	eb18 080a 	adds.w	r8, r8, sl
 800272e:	eb49 090b 	adc.w	r9, r9, fp
 8002732:	f04f 0100 	mov.w	r1, #0
 8002736:	f04f 0200 	mov.w	r2, #0
 800273a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800273e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002742:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002746:	4688      	mov	r8, r1
 8002748:	4691      	mov	r9, r2
 800274a:	eb1a 0508 	adds.w	r5, sl, r8
 800274e:	eb4b 0609 	adc.w	r6, fp, r9
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	4619      	mov	r1, r3
 8002758:	f04f 0200 	mov.w	r2, #0
 800275c:	f04f 0300 	mov.w	r3, #0
 8002760:	f04f 0400 	mov.w	r4, #0
 8002764:	0094      	lsls	r4, r2, #2
 8002766:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800276a:	008b      	lsls	r3, r1, #2
 800276c:	461a      	mov	r2, r3
 800276e:	4623      	mov	r3, r4
 8002770:	4628      	mov	r0, r5
 8002772:	4631      	mov	r1, r6
 8002774:	f7fd fd2e 	bl	80001d4 <__aeabi_uldivmod>
 8002778:	4603      	mov	r3, r0
 800277a:	460c      	mov	r4, r1
 800277c:	461a      	mov	r2, r3
 800277e:	4b50      	ldr	r3, [pc, #320]	; (80028c0 <UART_SetConfig+0x6f4>)
 8002780:	fba3 2302 	umull	r2, r3, r3, r2
 8002784:	095b      	lsrs	r3, r3, #5
 8002786:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	469b      	mov	fp, r3
 800278e:	f04f 0c00 	mov.w	ip, #0
 8002792:	46d9      	mov	r9, fp
 8002794:	46e2      	mov	sl, ip
 8002796:	eb19 0309 	adds.w	r3, r9, r9
 800279a:	eb4a 040a 	adc.w	r4, sl, sl
 800279e:	4699      	mov	r9, r3
 80027a0:	46a2      	mov	sl, r4
 80027a2:	eb19 090b 	adds.w	r9, r9, fp
 80027a6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80027aa:	f04f 0100 	mov.w	r1, #0
 80027ae:	f04f 0200 	mov.w	r2, #0
 80027b2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80027b6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80027ba:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80027be:	4689      	mov	r9, r1
 80027c0:	4692      	mov	sl, r2
 80027c2:	eb1b 0509 	adds.w	r5, fp, r9
 80027c6:	eb4c 060a 	adc.w	r6, ip, sl
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	4619      	mov	r1, r3
 80027d0:	f04f 0200 	mov.w	r2, #0
 80027d4:	f04f 0300 	mov.w	r3, #0
 80027d8:	f04f 0400 	mov.w	r4, #0
 80027dc:	0094      	lsls	r4, r2, #2
 80027de:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80027e2:	008b      	lsls	r3, r1, #2
 80027e4:	461a      	mov	r2, r3
 80027e6:	4623      	mov	r3, r4
 80027e8:	4628      	mov	r0, r5
 80027ea:	4631      	mov	r1, r6
 80027ec:	f7fd fcf2 	bl	80001d4 <__aeabi_uldivmod>
 80027f0:	4603      	mov	r3, r0
 80027f2:	460c      	mov	r4, r1
 80027f4:	461a      	mov	r2, r3
 80027f6:	4b32      	ldr	r3, [pc, #200]	; (80028c0 <UART_SetConfig+0x6f4>)
 80027f8:	fba3 1302 	umull	r1, r3, r3, r2
 80027fc:	095b      	lsrs	r3, r3, #5
 80027fe:	2164      	movs	r1, #100	; 0x64
 8002800:	fb01 f303 	mul.w	r3, r1, r3
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	011b      	lsls	r3, r3, #4
 8002808:	3332      	adds	r3, #50	; 0x32
 800280a:	4a2d      	ldr	r2, [pc, #180]	; (80028c0 <UART_SetConfig+0x6f4>)
 800280c:	fba2 2303 	umull	r2, r3, r2, r3
 8002810:	095b      	lsrs	r3, r3, #5
 8002812:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002816:	4498      	add	r8, r3
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	469b      	mov	fp, r3
 800281c:	f04f 0c00 	mov.w	ip, #0
 8002820:	46d9      	mov	r9, fp
 8002822:	46e2      	mov	sl, ip
 8002824:	eb19 0309 	adds.w	r3, r9, r9
 8002828:	eb4a 040a 	adc.w	r4, sl, sl
 800282c:	4699      	mov	r9, r3
 800282e:	46a2      	mov	sl, r4
 8002830:	eb19 090b 	adds.w	r9, r9, fp
 8002834:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002838:	f04f 0100 	mov.w	r1, #0
 800283c:	f04f 0200 	mov.w	r2, #0
 8002840:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002844:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002848:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800284c:	4689      	mov	r9, r1
 800284e:	4692      	mov	sl, r2
 8002850:	eb1b 0509 	adds.w	r5, fp, r9
 8002854:	eb4c 060a 	adc.w	r6, ip, sl
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	4619      	mov	r1, r3
 800285e:	f04f 0200 	mov.w	r2, #0
 8002862:	f04f 0300 	mov.w	r3, #0
 8002866:	f04f 0400 	mov.w	r4, #0
 800286a:	0094      	lsls	r4, r2, #2
 800286c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002870:	008b      	lsls	r3, r1, #2
 8002872:	461a      	mov	r2, r3
 8002874:	4623      	mov	r3, r4
 8002876:	4628      	mov	r0, r5
 8002878:	4631      	mov	r1, r6
 800287a:	f7fd fcab 	bl	80001d4 <__aeabi_uldivmod>
 800287e:	4603      	mov	r3, r0
 8002880:	460c      	mov	r4, r1
 8002882:	461a      	mov	r2, r3
 8002884:	4b0e      	ldr	r3, [pc, #56]	; (80028c0 <UART_SetConfig+0x6f4>)
 8002886:	fba3 1302 	umull	r1, r3, r3, r2
 800288a:	095b      	lsrs	r3, r3, #5
 800288c:	2164      	movs	r1, #100	; 0x64
 800288e:	fb01 f303 	mul.w	r3, r1, r3
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	011b      	lsls	r3, r3, #4
 8002896:	3332      	adds	r3, #50	; 0x32
 8002898:	4a09      	ldr	r2, [pc, #36]	; (80028c0 <UART_SetConfig+0x6f4>)
 800289a:	fba2 2303 	umull	r2, r3, r2, r3
 800289e:	095b      	lsrs	r3, r3, #5
 80028a0:	f003 020f 	and.w	r2, r3, #15
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4442      	add	r2, r8
 80028aa:	609a      	str	r2, [r3, #8]
}
 80028ac:	e7ff      	b.n	80028ae <UART_SetConfig+0x6e2>
 80028ae:	bf00      	nop
 80028b0:	3714      	adds	r7, #20
 80028b2:	46bd      	mov	sp, r7
 80028b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80028b8:	40011000 	.word	0x40011000
 80028bc:	40011400 	.word	0x40011400
 80028c0:	51eb851f 	.word	0x51eb851f

080028c4 <__libc_init_array>:
 80028c4:	b570      	push	{r4, r5, r6, lr}
 80028c6:	4e0d      	ldr	r6, [pc, #52]	; (80028fc <__libc_init_array+0x38>)
 80028c8:	4c0d      	ldr	r4, [pc, #52]	; (8002900 <__libc_init_array+0x3c>)
 80028ca:	1ba4      	subs	r4, r4, r6
 80028cc:	10a4      	asrs	r4, r4, #2
 80028ce:	2500      	movs	r5, #0
 80028d0:	42a5      	cmp	r5, r4
 80028d2:	d109      	bne.n	80028e8 <__libc_init_array+0x24>
 80028d4:	4e0b      	ldr	r6, [pc, #44]	; (8002904 <__libc_init_array+0x40>)
 80028d6:	4c0c      	ldr	r4, [pc, #48]	; (8002908 <__libc_init_array+0x44>)
 80028d8:	f000 f820 	bl	800291c <_init>
 80028dc:	1ba4      	subs	r4, r4, r6
 80028de:	10a4      	asrs	r4, r4, #2
 80028e0:	2500      	movs	r5, #0
 80028e2:	42a5      	cmp	r5, r4
 80028e4:	d105      	bne.n	80028f2 <__libc_init_array+0x2e>
 80028e6:	bd70      	pop	{r4, r5, r6, pc}
 80028e8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80028ec:	4798      	blx	r3
 80028ee:	3501      	adds	r5, #1
 80028f0:	e7ee      	b.n	80028d0 <__libc_init_array+0xc>
 80028f2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80028f6:	4798      	blx	r3
 80028f8:	3501      	adds	r5, #1
 80028fa:	e7f2      	b.n	80028e2 <__libc_init_array+0x1e>
 80028fc:	08002954 	.word	0x08002954
 8002900:	08002954 	.word	0x08002954
 8002904:	08002954 	.word	0x08002954
 8002908:	08002958 	.word	0x08002958

0800290c <memset>:
 800290c:	4402      	add	r2, r0
 800290e:	4603      	mov	r3, r0
 8002910:	4293      	cmp	r3, r2
 8002912:	d100      	bne.n	8002916 <memset+0xa>
 8002914:	4770      	bx	lr
 8002916:	f803 1b01 	strb.w	r1, [r3], #1
 800291a:	e7f9      	b.n	8002910 <memset+0x4>

0800291c <_init>:
 800291c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800291e:	bf00      	nop
 8002920:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002922:	bc08      	pop	{r3}
 8002924:	469e      	mov	lr, r3
 8002926:	4770      	bx	lr

08002928 <_fini>:
 8002928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800292a:	bf00      	nop
 800292c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800292e:	bc08      	pop	{r3}
 8002930:	469e      	mov	lr, r3
 8002932:	4770      	bx	lr
